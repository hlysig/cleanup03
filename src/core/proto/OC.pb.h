// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: OC.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_OC_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_OC_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_OC_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_OC_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_OC_2eproto;
namespace OC {
class GetTagRequest;
class GetTagRequestDefaultTypeInternal;
extern GetTagRequestDefaultTypeInternal _GetTagRequest_default_instance_;
class GetTagResponse;
class GetTagResponseDefaultTypeInternal;
extern GetTagResponseDefaultTypeInternal _GetTagResponse_default_instance_;
class Tag;
class TagDefaultTypeInternal;
extern TagDefaultTypeInternal _Tag_default_instance_;
}  // namespace OC
PROTOBUF_NAMESPACE_OPEN
template<> ::OC::GetTagRequest* Arena::CreateMaybeMessage<::OC::GetTagRequest>(Arena*);
template<> ::OC::GetTagResponse* Arena::CreateMaybeMessage<::OC::GetTagResponse>(Arena*);
template<> ::OC::Tag* Arena::CreateMaybeMessage<::OC::Tag>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace OC {

// ===================================================================

class Tag PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OC.Tag) */ {
 public:
  inline Tag() : Tag(nullptr) {}
  virtual ~Tag();

  Tag(const Tag& from);
  Tag(Tag&& from) noexcept
    : Tag() {
    *this = ::std::move(from);
  }

  inline Tag& operator=(const Tag& from) {
    CopyFrom(from);
    return *this;
  }
  inline Tag& operator=(Tag&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Tag& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Tag* internal_default_instance() {
    return reinterpret_cast<const Tag*>(
               &_Tag_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Tag& a, Tag& b) {
    a.Swap(&b);
  }
  inline void Swap(Tag* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Tag* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Tag* New() const final {
    return CreateMaybeMessage<Tag>(nullptr);
  }

  Tag* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Tag>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Tag& from);
  void MergeFrom(const Tag& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Tag* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OC.Tag";
  }
  protected:
  explicit Tag(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OC_2eproto);
    return ::descriptor_table_OC_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 4,
    kIdFieldNumber = 1,
    kTagSetIdFieldNumber = 2,
    kTypeIdFieldNumber = 3,
  };
  // string name = 4;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 tagSetId = 2;
  void clear_tagsetid();
  ::PROTOBUF_NAMESPACE_ID::int64 tagsetid() const;
  void set_tagsetid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_tagsetid() const;
  void _internal_set_tagsetid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 typeId = 3;
  void clear_typeid_();
  ::PROTOBUF_NAMESPACE_ID::int64 typeid_() const;
  void set_typeid_(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_typeid_() const;
  void _internal_set_typeid_(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:OC.Tag)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  ::PROTOBUF_NAMESPACE_ID::int64 tagsetid_;
  ::PROTOBUF_NAMESPACE_ID::int64 typeid__;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OC_2eproto;
};
// -------------------------------------------------------------------

class GetTagRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OC.GetTagRequest) */ {
 public:
  inline GetTagRequest() : GetTagRequest(nullptr) {}
  virtual ~GetTagRequest();

  GetTagRequest(const GetTagRequest& from);
  GetTagRequest(GetTagRequest&& from) noexcept
    : GetTagRequest() {
    *this = ::std::move(from);
  }

  inline GetTagRequest& operator=(const GetTagRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTagRequest& operator=(GetTagRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetTagRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetTagRequest* internal_default_instance() {
    return reinterpret_cast<const GetTagRequest*>(
               &_GetTagRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GetTagRequest& a, GetTagRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTagRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTagRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetTagRequest* New() const final {
    return CreateMaybeMessage<GetTagRequest>(nullptr);
  }

  GetTagRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetTagRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetTagRequest& from);
  void MergeFrom(const GetTagRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTagRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OC.GetTagRequest";
  }
  protected:
  explicit GetTagRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OC_2eproto);
    return ::descriptor_table_OC_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // int64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:OC.GetTagRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OC_2eproto;
};
// -------------------------------------------------------------------

class GetTagResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OC.GetTagResponse) */ {
 public:
  inline GetTagResponse() : GetTagResponse(nullptr) {}
  virtual ~GetTagResponse();

  GetTagResponse(const GetTagResponse& from);
  GetTagResponse(GetTagResponse&& from) noexcept
    : GetTagResponse() {
    *this = ::std::move(from);
  }

  inline GetTagResponse& operator=(const GetTagResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTagResponse& operator=(GetTagResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetTagResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetTagResponse* internal_default_instance() {
    return reinterpret_cast<const GetTagResponse*>(
               &_GetTagResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetTagResponse& a, GetTagResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTagResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTagResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetTagResponse* New() const final {
    return CreateMaybeMessage<GetTagResponse>(nullptr);
  }

  GetTagResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetTagResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetTagResponse& from);
  void MergeFrom(const GetTagResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTagResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OC.GetTagResponse";
  }
  protected:
  explicit GetTagResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OC_2eproto);
    return ::descriptor_table_OC_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagFieldNumber = 1,
  };
  // .OC.Tag tag = 1;
  bool has_tag() const;
  private:
  bool _internal_has_tag() const;
  public:
  void clear_tag();
  const ::OC::Tag& tag() const;
  ::OC::Tag* release_tag();
  ::OC::Tag* mutable_tag();
  void set_allocated_tag(::OC::Tag* tag);
  private:
  const ::OC::Tag& _internal_tag() const;
  ::OC::Tag* _internal_mutable_tag();
  public:
  void unsafe_arena_set_allocated_tag(
      ::OC::Tag* tag);
  ::OC::Tag* unsafe_arena_release_tag();

  // @@protoc_insertion_point(class_scope:OC.GetTagResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::OC::Tag* tag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OC_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Tag

// int64 id = 1;
inline void Tag::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Tag::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Tag::id() const {
  // @@protoc_insertion_point(field_get:OC.Tag.id)
  return _internal_id();
}
inline void Tag::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void Tag::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:OC.Tag.id)
}

// int64 tagSetId = 2;
inline void Tag::clear_tagsetid() {
  tagsetid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Tag::_internal_tagsetid() const {
  return tagsetid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Tag::tagsetid() const {
  // @@protoc_insertion_point(field_get:OC.Tag.tagSetId)
  return _internal_tagsetid();
}
inline void Tag::_internal_set_tagsetid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  tagsetid_ = value;
}
inline void Tag::set_tagsetid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_tagsetid(value);
  // @@protoc_insertion_point(field_set:OC.Tag.tagSetId)
}

// int64 typeId = 3;
inline void Tag::clear_typeid_() {
  typeid__ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Tag::_internal_typeid_() const {
  return typeid__;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Tag::typeid_() const {
  // @@protoc_insertion_point(field_get:OC.Tag.typeId)
  return _internal_typeid_();
}
inline void Tag::_internal_set_typeid_(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  typeid__ = value;
}
inline void Tag::set_typeid_(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_typeid_(value);
  // @@protoc_insertion_point(field_set:OC.Tag.typeId)
}

// string name = 4;
inline void Tag::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Tag::name() const {
  // @@protoc_insertion_point(field_get:OC.Tag.name)
  return _internal_name();
}
inline void Tag::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:OC.Tag.name)
}
inline std::string* Tag::mutable_name() {
  // @@protoc_insertion_point(field_mutable:OC.Tag.name)
  return _internal_mutable_name();
}
inline const std::string& Tag::_internal_name() const {
  return name_.Get();
}
inline void Tag::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Tag::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:OC.Tag.name)
}
inline void Tag::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:OC.Tag.name)
}
inline void Tag::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:OC.Tag.name)
}
inline std::string* Tag::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Tag::release_name() {
  // @@protoc_insertion_point(field_release:OC.Tag.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Tag::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:OC.Tag.name)
}

// -------------------------------------------------------------------

// GetTagRequest

// int64 id = 1;
inline void GetTagRequest::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetTagRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetTagRequest::id() const {
  // @@protoc_insertion_point(field_get:OC.GetTagRequest.id)
  return _internal_id();
}
inline void GetTagRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void GetTagRequest::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:OC.GetTagRequest.id)
}

// -------------------------------------------------------------------

// GetTagResponse

// .OC.Tag tag = 1;
inline bool GetTagResponse::_internal_has_tag() const {
  return this != internal_default_instance() && tag_ != nullptr;
}
inline bool GetTagResponse::has_tag() const {
  return _internal_has_tag();
}
inline void GetTagResponse::clear_tag() {
  if (GetArena() == nullptr && tag_ != nullptr) {
    delete tag_;
  }
  tag_ = nullptr;
}
inline const ::OC::Tag& GetTagResponse::_internal_tag() const {
  const ::OC::Tag* p = tag_;
  return p != nullptr ? *p : *reinterpret_cast<const ::OC::Tag*>(
      &::OC::_Tag_default_instance_);
}
inline const ::OC::Tag& GetTagResponse::tag() const {
  // @@protoc_insertion_point(field_get:OC.GetTagResponse.tag)
  return _internal_tag();
}
inline void GetTagResponse::unsafe_arena_set_allocated_tag(
    ::OC::Tag* tag) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tag_);
  }
  tag_ = tag;
  if (tag) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OC.GetTagResponse.tag)
}
inline ::OC::Tag* GetTagResponse::release_tag() {
  
  ::OC::Tag* temp = tag_;
  tag_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::OC::Tag* GetTagResponse::unsafe_arena_release_tag() {
  // @@protoc_insertion_point(field_release:OC.GetTagResponse.tag)
  
  ::OC::Tag* temp = tag_;
  tag_ = nullptr;
  return temp;
}
inline ::OC::Tag* GetTagResponse::_internal_mutable_tag() {
  
  if (tag_ == nullptr) {
    auto* p = CreateMaybeMessage<::OC::Tag>(GetArena());
    tag_ = p;
  }
  return tag_;
}
inline ::OC::Tag* GetTagResponse::mutable_tag() {
  // @@protoc_insertion_point(field_mutable:OC.GetTagResponse.tag)
  return _internal_mutable_tag();
}
inline void GetTagResponse::set_allocated_tag(::OC::Tag* tag) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete tag_;
  }
  if (tag) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(tag);
    if (message_arena != submessage_arena) {
      tag = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tag, submessage_arena);
    }
    
  } else {
    
  }
  tag_ = tag;
  // @@protoc_insertion_point(field_set_allocated:OC.GetTagResponse.tag)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace OC

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_OC_2eproto
