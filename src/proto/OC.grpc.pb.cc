// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: OC.proto

#include "OC.pb.h"
#include "OC.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace OC {

static const char* OCService_method_names[] = {
  "/OC.OCService/getObjects",
  "/OC.OCService/getObject",
  "/OC.OCService/putObject",
  "/OC.OCService/getTagSets",
  "/OC.OCService/getTagSet",
  "/OC.OCService/putTagSet",
  "/OC.OCService/getTags",
  "/OC.OCService/getTag",
  "/OC.OCService/putTag",
  "/OC.OCService/reConnectDB",
  "/OC.OCService/stopService",
};

std::unique_ptr< OCService::Stub> OCService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< OCService::Stub> stub(new OCService::Stub(channel));
  return stub;
}

OCService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_getObjects_(OCService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getObject_(OCService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_putObject_(OCService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getTagSets_(OCService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getTagSet_(OCService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_putTagSet_(OCService_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getTags_(OCService_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getTag_(OCService_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_putTag_(OCService_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_reConnectDB_(OCService_method_names[9], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_stopService_(OCService_method_names[10], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status OCService::Stub::getObjects(::grpc::ClientContext* context, const ::OC::GetObjectsRequest& request, ::OC::GetObjectsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_getObjects_, context, request, response);
}

void OCService::Stub::experimental_async::getObjects(::grpc::ClientContext* context, const ::OC::GetObjectsRequest* request, ::OC::GetObjectsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_getObjects_, context, request, response, std::move(f));
}

void OCService::Stub::experimental_async::getObjects(::grpc::ClientContext* context, const ::OC::GetObjectsRequest* request, ::OC::GetObjectsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_getObjects_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::OC::GetObjectsResponse>* OCService::Stub::PrepareAsyncgetObjectsRaw(::grpc::ClientContext* context, const ::OC::GetObjectsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::OC::GetObjectsResponse>::Create(channel_.get(), cq, rpcmethod_getObjects_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::OC::GetObjectsResponse>* OCService::Stub::AsyncgetObjectsRaw(::grpc::ClientContext* context, const ::OC::GetObjectsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetObjectsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OCService::Stub::getObject(::grpc::ClientContext* context, const ::OC::GetObjectRequest& request, ::OC::GetObjectResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_getObject_, context, request, response);
}

void OCService::Stub::experimental_async::getObject(::grpc::ClientContext* context, const ::OC::GetObjectRequest* request, ::OC::GetObjectResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_getObject_, context, request, response, std::move(f));
}

void OCService::Stub::experimental_async::getObject(::grpc::ClientContext* context, const ::OC::GetObjectRequest* request, ::OC::GetObjectResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_getObject_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::OC::GetObjectResponse>* OCService::Stub::PrepareAsyncgetObjectRaw(::grpc::ClientContext* context, const ::OC::GetObjectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::OC::GetObjectResponse>::Create(channel_.get(), cq, rpcmethod_getObject_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::OC::GetObjectResponse>* OCService::Stub::AsyncgetObjectRaw(::grpc::ClientContext* context, const ::OC::GetObjectRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetObjectRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OCService::Stub::putObject(::grpc::ClientContext* context, const ::OC::PutObjectRequest& request, ::OC::PutObjectResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_putObject_, context, request, response);
}

void OCService::Stub::experimental_async::putObject(::grpc::ClientContext* context, const ::OC::PutObjectRequest* request, ::OC::PutObjectResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_putObject_, context, request, response, std::move(f));
}

void OCService::Stub::experimental_async::putObject(::grpc::ClientContext* context, const ::OC::PutObjectRequest* request, ::OC::PutObjectResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_putObject_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::OC::PutObjectResponse>* OCService::Stub::PrepareAsyncputObjectRaw(::grpc::ClientContext* context, const ::OC::PutObjectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::OC::PutObjectResponse>::Create(channel_.get(), cq, rpcmethod_putObject_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::OC::PutObjectResponse>* OCService::Stub::AsyncputObjectRaw(::grpc::ClientContext* context, const ::OC::PutObjectRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncputObjectRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OCService::Stub::getTagSets(::grpc::ClientContext* context, const ::OC::GetTagSetsRequest& request, ::OC::GetTagSetsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_getTagSets_, context, request, response);
}

void OCService::Stub::experimental_async::getTagSets(::grpc::ClientContext* context, const ::OC::GetTagSetsRequest* request, ::OC::GetTagSetsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_getTagSets_, context, request, response, std::move(f));
}

void OCService::Stub::experimental_async::getTagSets(::grpc::ClientContext* context, const ::OC::GetTagSetsRequest* request, ::OC::GetTagSetsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_getTagSets_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::OC::GetTagSetsResponse>* OCService::Stub::PrepareAsyncgetTagSetsRaw(::grpc::ClientContext* context, const ::OC::GetTagSetsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::OC::GetTagSetsResponse>::Create(channel_.get(), cq, rpcmethod_getTagSets_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::OC::GetTagSetsResponse>* OCService::Stub::AsyncgetTagSetsRaw(::grpc::ClientContext* context, const ::OC::GetTagSetsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetTagSetsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OCService::Stub::getTagSet(::grpc::ClientContext* context, const ::OC::GetTagSetRequest& request, ::OC::GetTagSetResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_getTagSet_, context, request, response);
}

void OCService::Stub::experimental_async::getTagSet(::grpc::ClientContext* context, const ::OC::GetTagSetRequest* request, ::OC::GetTagSetResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_getTagSet_, context, request, response, std::move(f));
}

void OCService::Stub::experimental_async::getTagSet(::grpc::ClientContext* context, const ::OC::GetTagSetRequest* request, ::OC::GetTagSetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_getTagSet_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::OC::GetTagSetResponse>* OCService::Stub::PrepareAsyncgetTagSetRaw(::grpc::ClientContext* context, const ::OC::GetTagSetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::OC::GetTagSetResponse>::Create(channel_.get(), cq, rpcmethod_getTagSet_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::OC::GetTagSetResponse>* OCService::Stub::AsyncgetTagSetRaw(::grpc::ClientContext* context, const ::OC::GetTagSetRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetTagSetRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OCService::Stub::putTagSet(::grpc::ClientContext* context, const ::OC::PutTagSetRequest& request, ::OC::PutTagSetResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_putTagSet_, context, request, response);
}

void OCService::Stub::experimental_async::putTagSet(::grpc::ClientContext* context, const ::OC::PutTagSetRequest* request, ::OC::PutTagSetResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_putTagSet_, context, request, response, std::move(f));
}

void OCService::Stub::experimental_async::putTagSet(::grpc::ClientContext* context, const ::OC::PutTagSetRequest* request, ::OC::PutTagSetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_putTagSet_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::OC::PutTagSetResponse>* OCService::Stub::PrepareAsyncputTagSetRaw(::grpc::ClientContext* context, const ::OC::PutTagSetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::OC::PutTagSetResponse>::Create(channel_.get(), cq, rpcmethod_putTagSet_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::OC::PutTagSetResponse>* OCService::Stub::AsyncputTagSetRaw(::grpc::ClientContext* context, const ::OC::PutTagSetRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncputTagSetRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OCService::Stub::getTags(::grpc::ClientContext* context, const ::OC::GetTagsRequest& request, ::OC::GetTagsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_getTags_, context, request, response);
}

void OCService::Stub::experimental_async::getTags(::grpc::ClientContext* context, const ::OC::GetTagsRequest* request, ::OC::GetTagsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_getTags_, context, request, response, std::move(f));
}

void OCService::Stub::experimental_async::getTags(::grpc::ClientContext* context, const ::OC::GetTagsRequest* request, ::OC::GetTagsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_getTags_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::OC::GetTagsResponse>* OCService::Stub::PrepareAsyncgetTagsRaw(::grpc::ClientContext* context, const ::OC::GetTagsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::OC::GetTagsResponse>::Create(channel_.get(), cq, rpcmethod_getTags_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::OC::GetTagsResponse>* OCService::Stub::AsyncgetTagsRaw(::grpc::ClientContext* context, const ::OC::GetTagsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetTagsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OCService::Stub::getTag(::grpc::ClientContext* context, const ::OC::GetTagRequest& request, ::OC::GetTagResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_getTag_, context, request, response);
}

void OCService::Stub::experimental_async::getTag(::grpc::ClientContext* context, const ::OC::GetTagRequest* request, ::OC::GetTagResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_getTag_, context, request, response, std::move(f));
}

void OCService::Stub::experimental_async::getTag(::grpc::ClientContext* context, const ::OC::GetTagRequest* request, ::OC::GetTagResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_getTag_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::OC::GetTagResponse>* OCService::Stub::PrepareAsyncgetTagRaw(::grpc::ClientContext* context, const ::OC::GetTagRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::OC::GetTagResponse>::Create(channel_.get(), cq, rpcmethod_getTag_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::OC::GetTagResponse>* OCService::Stub::AsyncgetTagRaw(::grpc::ClientContext* context, const ::OC::GetTagRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetTagRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OCService::Stub::putTag(::grpc::ClientContext* context, const ::OC::PutTagRequest& request, ::OC::PutTagResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_putTag_, context, request, response);
}

void OCService::Stub::experimental_async::putTag(::grpc::ClientContext* context, const ::OC::PutTagRequest* request, ::OC::PutTagResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_putTag_, context, request, response, std::move(f));
}

void OCService::Stub::experimental_async::putTag(::grpc::ClientContext* context, const ::OC::PutTagRequest* request, ::OC::PutTagResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_putTag_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::OC::PutTagResponse>* OCService::Stub::PrepareAsyncputTagRaw(::grpc::ClientContext* context, const ::OC::PutTagRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::OC::PutTagResponse>::Create(channel_.get(), cq, rpcmethod_putTag_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::OC::PutTagResponse>* OCService::Stub::AsyncputTagRaw(::grpc::ClientContext* context, const ::OC::PutTagRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncputTagRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OCService::Stub::reConnectDB(::grpc::ClientContext* context, const ::OC::Empty& request, ::OC::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_reConnectDB_, context, request, response);
}

void OCService::Stub::experimental_async::reConnectDB(::grpc::ClientContext* context, const ::OC::Empty* request, ::OC::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_reConnectDB_, context, request, response, std::move(f));
}

void OCService::Stub::experimental_async::reConnectDB(::grpc::ClientContext* context, const ::OC::Empty* request, ::OC::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_reConnectDB_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::OC::Empty>* OCService::Stub::PrepareAsyncreConnectDBRaw(::grpc::ClientContext* context, const ::OC::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::OC::Empty>::Create(channel_.get(), cq, rpcmethod_reConnectDB_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::OC::Empty>* OCService::Stub::AsyncreConnectDBRaw(::grpc::ClientContext* context, const ::OC::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncreConnectDBRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OCService::Stub::stopService(::grpc::ClientContext* context, const ::OC::Empty& request, ::OC::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_stopService_, context, request, response);
}

void OCService::Stub::experimental_async::stopService(::grpc::ClientContext* context, const ::OC::Empty* request, ::OC::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_stopService_, context, request, response, std::move(f));
}

void OCService::Stub::experimental_async::stopService(::grpc::ClientContext* context, const ::OC::Empty* request, ::OC::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_stopService_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::OC::Empty>* OCService::Stub::PrepareAsyncstopServiceRaw(::grpc::ClientContext* context, const ::OC::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::OC::Empty>::Create(channel_.get(), cq, rpcmethod_stopService_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::OC::Empty>* OCService::Stub::AsyncstopServiceRaw(::grpc::ClientContext* context, const ::OC::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncstopServiceRaw(context, request, cq);
  result->StartCall();
  return result;
}

OCService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OCService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OCService::Service, ::OC::GetObjectsRequest, ::OC::GetObjectsResponse>(
          [](OCService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::OC::GetObjectsRequest* req,
             ::OC::GetObjectsResponse* resp) {
               return service->getObjects(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OCService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OCService::Service, ::OC::GetObjectRequest, ::OC::GetObjectResponse>(
          [](OCService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::OC::GetObjectRequest* req,
             ::OC::GetObjectResponse* resp) {
               return service->getObject(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OCService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OCService::Service, ::OC::PutObjectRequest, ::OC::PutObjectResponse>(
          [](OCService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::OC::PutObjectRequest* req,
             ::OC::PutObjectResponse* resp) {
               return service->putObject(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OCService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OCService::Service, ::OC::GetTagSetsRequest, ::OC::GetTagSetsResponse>(
          [](OCService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::OC::GetTagSetsRequest* req,
             ::OC::GetTagSetsResponse* resp) {
               return service->getTagSets(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OCService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OCService::Service, ::OC::GetTagSetRequest, ::OC::GetTagSetResponse>(
          [](OCService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::OC::GetTagSetRequest* req,
             ::OC::GetTagSetResponse* resp) {
               return service->getTagSet(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OCService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OCService::Service, ::OC::PutTagSetRequest, ::OC::PutTagSetResponse>(
          [](OCService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::OC::PutTagSetRequest* req,
             ::OC::PutTagSetResponse* resp) {
               return service->putTagSet(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OCService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OCService::Service, ::OC::GetTagsRequest, ::OC::GetTagsResponse>(
          [](OCService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::OC::GetTagsRequest* req,
             ::OC::GetTagsResponse* resp) {
               return service->getTags(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OCService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OCService::Service, ::OC::GetTagRequest, ::OC::GetTagResponse>(
          [](OCService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::OC::GetTagRequest* req,
             ::OC::GetTagResponse* resp) {
               return service->getTag(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OCService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OCService::Service, ::OC::PutTagRequest, ::OC::PutTagResponse>(
          [](OCService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::OC::PutTagRequest* req,
             ::OC::PutTagResponse* resp) {
               return service->putTag(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OCService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OCService::Service, ::OC::Empty, ::OC::Empty>(
          [](OCService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::OC::Empty* req,
             ::OC::Empty* resp) {
               return service->reConnectDB(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OCService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OCService::Service, ::OC::Empty, ::OC::Empty>(
          [](OCService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::OC::Empty* req,
             ::OC::Empty* resp) {
               return service->stopService(ctx, req, resp);
             }, this)));
}

OCService::Service::~Service() {
}

::grpc::Status OCService::Service::getObjects(::grpc::ServerContext* context, const ::OC::GetObjectsRequest* request, ::OC::GetObjectsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OCService::Service::getObject(::grpc::ServerContext* context, const ::OC::GetObjectRequest* request, ::OC::GetObjectResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OCService::Service::putObject(::grpc::ServerContext* context, const ::OC::PutObjectRequest* request, ::OC::PutObjectResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OCService::Service::getTagSets(::grpc::ServerContext* context, const ::OC::GetTagSetsRequest* request, ::OC::GetTagSetsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OCService::Service::getTagSet(::grpc::ServerContext* context, const ::OC::GetTagSetRequest* request, ::OC::GetTagSetResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OCService::Service::putTagSet(::grpc::ServerContext* context, const ::OC::PutTagSetRequest* request, ::OC::PutTagSetResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OCService::Service::getTags(::grpc::ServerContext* context, const ::OC::GetTagsRequest* request, ::OC::GetTagsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OCService::Service::getTag(::grpc::ServerContext* context, const ::OC::GetTagRequest* request, ::OC::GetTagResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OCService::Service::putTag(::grpc::ServerContext* context, const ::OC::PutTagRequest* request, ::OC::PutTagResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OCService::Service::reConnectDB(::grpc::ServerContext* context, const ::OC::Empty* request, ::OC::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OCService::Service::stopService(::grpc::ServerContext* context, const ::OC::Empty* request, ::OC::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace OC

