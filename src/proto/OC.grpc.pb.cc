// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: OC.proto

#include "OC.pb.h"
#include "OC.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace OC {

static const char* OCService_method_names[] = {
  "/OC.OCService/getTag",
  "/OC.OCService/reConnectDB",
  "/OC.OCService/stopService",
};

std::unique_ptr< OCService::Stub> OCService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< OCService::Stub> stub(new OCService::Stub(channel));
  return stub;
}

OCService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_getTag_(OCService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_reConnectDB_(OCService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_stopService_(OCService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status OCService::Stub::getTag(::grpc::ClientContext* context, const ::OC::GetTagRequest& request, ::OC::GetTagResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::OC::GetTagRequest, ::OC::GetTagResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getTag_, context, request, response);
}

void OCService::Stub::experimental_async::getTag(::grpc::ClientContext* context, const ::OC::GetTagRequest* request, ::OC::GetTagResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::OC::GetTagRequest, ::OC::GetTagResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getTag_, context, request, response, std::move(f));
}

void OCService::Stub::experimental_async::getTag(::grpc::ClientContext* context, const ::OC::GetTagRequest* request, ::OC::GetTagResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getTag_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::OC::GetTagResponse>* OCService::Stub::PrepareAsyncgetTagRaw(::grpc::ClientContext* context, const ::OC::GetTagRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::OC::GetTagResponse, ::OC::GetTagRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getTag_, context, request);
}

::grpc::ClientAsyncResponseReader< ::OC::GetTagResponse>* OCService::Stub::AsyncgetTagRaw(::grpc::ClientContext* context, const ::OC::GetTagRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetTagRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OCService::Stub::reConnectDB(::grpc::ClientContext* context, const ::OC::Empty& request, ::OC::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::OC::Empty, ::OC::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_reConnectDB_, context, request, response);
}

void OCService::Stub::experimental_async::reConnectDB(::grpc::ClientContext* context, const ::OC::Empty* request, ::OC::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::OC::Empty, ::OC::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_reConnectDB_, context, request, response, std::move(f));
}

void OCService::Stub::experimental_async::reConnectDB(::grpc::ClientContext* context, const ::OC::Empty* request, ::OC::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_reConnectDB_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::OC::Empty>* OCService::Stub::PrepareAsyncreConnectDBRaw(::grpc::ClientContext* context, const ::OC::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::OC::Empty, ::OC::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_reConnectDB_, context, request);
}

::grpc::ClientAsyncResponseReader< ::OC::Empty>* OCService::Stub::AsyncreConnectDBRaw(::grpc::ClientContext* context, const ::OC::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncreConnectDBRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OCService::Stub::stopService(::grpc::ClientContext* context, const ::OC::Empty& request, ::OC::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::OC::Empty, ::OC::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_stopService_, context, request, response);
}

void OCService::Stub::experimental_async::stopService(::grpc::ClientContext* context, const ::OC::Empty* request, ::OC::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::OC::Empty, ::OC::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_stopService_, context, request, response, std::move(f));
}

void OCService::Stub::experimental_async::stopService(::grpc::ClientContext* context, const ::OC::Empty* request, ::OC::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_stopService_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::OC::Empty>* OCService::Stub::PrepareAsyncstopServiceRaw(::grpc::ClientContext* context, const ::OC::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::OC::Empty, ::OC::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_stopService_, context, request);
}

::grpc::ClientAsyncResponseReader< ::OC::Empty>* OCService::Stub::AsyncstopServiceRaw(::grpc::ClientContext* context, const ::OC::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncstopServiceRaw(context, request, cq);
  result->StartCall();
  return result;
}

OCService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OCService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OCService::Service, ::OC::GetTagRequest, ::OC::GetTagResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OCService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::OC::GetTagRequest* req,
             ::OC::GetTagResponse* resp) {
               return service->getTag(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OCService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OCService::Service, ::OC::Empty, ::OC::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OCService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::OC::Empty* req,
             ::OC::Empty* resp) {
               return service->reConnectDB(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OCService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OCService::Service, ::OC::Empty, ::OC::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OCService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::OC::Empty* req,
             ::OC::Empty* resp) {
               return service->stopService(ctx, req, resp);
             }, this)));
}

OCService::Service::~Service() {
}

::grpc::Status OCService::Service::getTag(::grpc::ServerContext* context, const ::OC::GetTagRequest* request, ::OC::GetTagResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OCService::Service::reConnectDB(::grpc::ServerContext* context, const ::OC::Empty* request, ::OC::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OCService::Service::stopService(::grpc::ServerContext* context, const ::OC::Empty* request, ::OC::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace OC

