// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: OC.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_OC_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_OC_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_OC_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_OC_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_OC_2eproto;
namespace OC {
class AlphanumericalTag;
class AlphanumericalTagDefaultTypeInternal;
extern AlphanumericalTagDefaultTypeInternal _AlphanumericalTag_default_instance_;
class DateTag;
class DateTagDefaultTypeInternal;
extern DateTagDefaultTypeInternal _DateTag_default_instance_;
class Empty;
class EmptyDefaultTypeInternal;
extern EmptyDefaultTypeInternal _Empty_default_instance_;
class GetTagRequest;
class GetTagRequestDefaultTypeInternal;
extern GetTagRequestDefaultTypeInternal _GetTagRequest_default_instance_;
class GetTagResponse;
class GetTagResponseDefaultTypeInternal;
extern GetTagResponseDefaultTypeInternal _GetTagResponse_default_instance_;
class NumericalTag;
class NumericalTagDefaultTypeInternal;
extern NumericalTagDefaultTypeInternal _NumericalTag_default_instance_;
class RGBTag;
class RGBTagDefaultTypeInternal;
extern RGBTagDefaultTypeInternal _RGBTag_default_instance_;
class Tag;
class TagDefaultTypeInternal;
extern TagDefaultTypeInternal _Tag_default_instance_;
class TimeTag;
class TimeTagDefaultTypeInternal;
extern TimeTagDefaultTypeInternal _TimeTag_default_instance_;
}  // namespace OC
PROTOBUF_NAMESPACE_OPEN
template<> ::OC::AlphanumericalTag* Arena::CreateMaybeMessage<::OC::AlphanumericalTag>(Arena*);
template<> ::OC::DateTag* Arena::CreateMaybeMessage<::OC::DateTag>(Arena*);
template<> ::OC::Empty* Arena::CreateMaybeMessage<::OC::Empty>(Arena*);
template<> ::OC::GetTagRequest* Arena::CreateMaybeMessage<::OC::GetTagRequest>(Arena*);
template<> ::OC::GetTagResponse* Arena::CreateMaybeMessage<::OC::GetTagResponse>(Arena*);
template<> ::OC::NumericalTag* Arena::CreateMaybeMessage<::OC::NumericalTag>(Arena*);
template<> ::OC::RGBTag* Arena::CreateMaybeMessage<::OC::RGBTag>(Arena*);
template<> ::OC::Tag* Arena::CreateMaybeMessage<::OC::Tag>(Arena*);
template<> ::OC::TimeTag* Arena::CreateMaybeMessage<::OC::TimeTag>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace OC {

// ===================================================================

class AlphanumericalTag PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OC.AlphanumericalTag) */ {
 public:
  inline AlphanumericalTag() : AlphanumericalTag(nullptr) {}
  virtual ~AlphanumericalTag();

  AlphanumericalTag(const AlphanumericalTag& from);
  AlphanumericalTag(AlphanumericalTag&& from) noexcept
    : AlphanumericalTag() {
    *this = ::std::move(from);
  }

  inline AlphanumericalTag& operator=(const AlphanumericalTag& from) {
    CopyFrom(from);
    return *this;
  }
  inline AlphanumericalTag& operator=(AlphanumericalTag&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AlphanumericalTag& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AlphanumericalTag* internal_default_instance() {
    return reinterpret_cast<const AlphanumericalTag*>(
               &_AlphanumericalTag_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AlphanumericalTag& a, AlphanumericalTag& b) {
    a.Swap(&b);
  }
  inline void Swap(AlphanumericalTag* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AlphanumericalTag* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AlphanumericalTag* New() const final {
    return CreateMaybeMessage<AlphanumericalTag>(nullptr);
  }

  AlphanumericalTag* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AlphanumericalTag>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AlphanumericalTag& from);
  void MergeFrom(const AlphanumericalTag& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AlphanumericalTag* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OC.AlphanumericalTag";
  }
  protected:
  explicit AlphanumericalTag(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OC_2eproto);
    return ::descriptor_table_OC_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:OC.AlphanumericalTag)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OC_2eproto;
};
// -------------------------------------------------------------------

class DateTag PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OC.DateTag) */ {
 public:
  inline DateTag() : DateTag(nullptr) {}
  virtual ~DateTag();

  DateTag(const DateTag& from);
  DateTag(DateTag&& from) noexcept
    : DateTag() {
    *this = ::std::move(from);
  }

  inline DateTag& operator=(const DateTag& from) {
    CopyFrom(from);
    return *this;
  }
  inline DateTag& operator=(DateTag&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DateTag& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DateTag* internal_default_instance() {
    return reinterpret_cast<const DateTag*>(
               &_DateTag_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DateTag& a, DateTag& b) {
    a.Swap(&b);
  }
  inline void Swap(DateTag* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DateTag* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DateTag* New() const final {
    return CreateMaybeMessage<DateTag>(nullptr);
  }

  DateTag* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DateTag>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DateTag& from);
  void MergeFrom(const DateTag& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DateTag* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OC.DateTag";
  }
  protected:
  explicit DateTag(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OC_2eproto);
    return ::descriptor_table_OC_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kYearFieldNumber = 1,
    kMonthFieldNumber = 2,
    kDayFieldNumber = 3,
  };
  // uint32 year = 1;
  void clear_year();
  ::PROTOBUF_NAMESPACE_ID::uint32 year() const;
  void set_year(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_year() const;
  void _internal_set_year(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 month = 2;
  void clear_month();
  ::PROTOBUF_NAMESPACE_ID::uint32 month() const;
  void set_month(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_month() const;
  void _internal_set_month(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 day = 3;
  void clear_day();
  ::PROTOBUF_NAMESPACE_ID::uint32 day() const;
  void set_day(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_day() const;
  void _internal_set_day(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:OC.DateTag)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 year_;
  ::PROTOBUF_NAMESPACE_ID::uint32 month_;
  ::PROTOBUF_NAMESPACE_ID::uint32 day_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OC_2eproto;
};
// -------------------------------------------------------------------

class TimeTag PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OC.TimeTag) */ {
 public:
  inline TimeTag() : TimeTag(nullptr) {}
  virtual ~TimeTag();

  TimeTag(const TimeTag& from);
  TimeTag(TimeTag&& from) noexcept
    : TimeTag() {
    *this = ::std::move(from);
  }

  inline TimeTag& operator=(const TimeTag& from) {
    CopyFrom(from);
    return *this;
  }
  inline TimeTag& operator=(TimeTag&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TimeTag& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TimeTag* internal_default_instance() {
    return reinterpret_cast<const TimeTag*>(
               &_TimeTag_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TimeTag& a, TimeTag& b) {
    a.Swap(&b);
  }
  inline void Swap(TimeTag* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TimeTag* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TimeTag* New() const final {
    return CreateMaybeMessage<TimeTag>(nullptr);
  }

  TimeTag* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TimeTag>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TimeTag& from);
  void MergeFrom(const TimeTag& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TimeTag* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OC.TimeTag";
  }
  protected:
  explicit TimeTag(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OC_2eproto);
    return ::descriptor_table_OC_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHoursFieldNumber = 1,
    kMinutesFieldNumber = 2,
    kSecondsFieldNumber = 3,
    kMillisecondsFieldNumber = 4,
  };
  // uint32 hours = 1;
  void clear_hours();
  ::PROTOBUF_NAMESPACE_ID::uint32 hours() const;
  void set_hours(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_hours() const;
  void _internal_set_hours(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 minutes = 2;
  void clear_minutes();
  ::PROTOBUF_NAMESPACE_ID::uint32 minutes() const;
  void set_minutes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_minutes() const;
  void _internal_set_minutes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 seconds = 3;
  void clear_seconds();
  ::PROTOBUF_NAMESPACE_ID::uint32 seconds() const;
  void set_seconds(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_seconds() const;
  void _internal_set_seconds(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 milliseconds = 4;
  void clear_milliseconds();
  ::PROTOBUF_NAMESPACE_ID::uint32 milliseconds() const;
  void set_milliseconds(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_milliseconds() const;
  void _internal_set_milliseconds(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:OC.TimeTag)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 hours_;
  ::PROTOBUF_NAMESPACE_ID::uint32 minutes_;
  ::PROTOBUF_NAMESPACE_ID::uint32 seconds_;
  ::PROTOBUF_NAMESPACE_ID::uint32 milliseconds_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OC_2eproto;
};
// -------------------------------------------------------------------

class NumericalTag PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OC.NumericalTag) */ {
 public:
  inline NumericalTag() : NumericalTag(nullptr) {}
  virtual ~NumericalTag();

  NumericalTag(const NumericalTag& from);
  NumericalTag(NumericalTag&& from) noexcept
    : NumericalTag() {
    *this = ::std::move(from);
  }

  inline NumericalTag& operator=(const NumericalTag& from) {
    CopyFrom(from);
    return *this;
  }
  inline NumericalTag& operator=(NumericalTag&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NumericalTag& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NumericalTag* internal_default_instance() {
    return reinterpret_cast<const NumericalTag*>(
               &_NumericalTag_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(NumericalTag& a, NumericalTag& b) {
    a.Swap(&b);
  }
  inline void Swap(NumericalTag* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NumericalTag* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NumericalTag* New() const final {
    return CreateMaybeMessage<NumericalTag>(nullptr);
  }

  NumericalTag* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NumericalTag>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NumericalTag& from);
  void MergeFrom(const NumericalTag& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NumericalTag* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OC.NumericalTag";
  }
  protected:
  explicit NumericalTag(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OC_2eproto);
    return ::descriptor_table_OC_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumberFieldNumber = 1,
  };
  // int64 number = 1;
  void clear_number();
  ::PROTOBUF_NAMESPACE_ID::int64 number() const;
  void set_number(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_number() const;
  void _internal_set_number(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:OC.NumericalTag)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 number_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OC_2eproto;
};
// -------------------------------------------------------------------

class RGBTag PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OC.RGBTag) */ {
 public:
  inline RGBTag() : RGBTag(nullptr) {}
  virtual ~RGBTag();

  RGBTag(const RGBTag& from);
  RGBTag(RGBTag&& from) noexcept
    : RGBTag() {
    *this = ::std::move(from);
  }

  inline RGBTag& operator=(const RGBTag& from) {
    CopyFrom(from);
    return *this;
  }
  inline RGBTag& operator=(RGBTag&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RGBTag& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RGBTag* internal_default_instance() {
    return reinterpret_cast<const RGBTag*>(
               &_RGBTag_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RGBTag& a, RGBTag& b) {
    a.Swap(&b);
  }
  inline void Swap(RGBTag* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RGBTag* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RGBTag* New() const final {
    return CreateMaybeMessage<RGBTag>(nullptr);
  }

  RGBTag* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RGBTag>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RGBTag& from);
  void MergeFrom(const RGBTag& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RGBTag* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OC.RGBTag";
  }
  protected:
  explicit RGBTag(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OC_2eproto);
    return ::descriptor_table_OC_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:OC.RGBTag)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OC_2eproto;
};
// -------------------------------------------------------------------

class Tag PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OC.Tag) */ {
 public:
  inline Tag() : Tag(nullptr) {}
  virtual ~Tag();

  Tag(const Tag& from);
  Tag(Tag&& from) noexcept
    : Tag() {
    *this = ::std::move(from);
  }

  inline Tag& operator=(const Tag& from) {
    CopyFrom(from);
    return *this;
  }
  inline Tag& operator=(Tag&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Tag& default_instance();

  enum PayloadCase {
    kAlpha = 4,
    kDate = 5,
    kTime = 6,
    kNumber = 7,
    kRGB = 8,
    PAYLOAD_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Tag* internal_default_instance() {
    return reinterpret_cast<const Tag*>(
               &_Tag_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Tag& a, Tag& b) {
    a.Swap(&b);
  }
  inline void Swap(Tag* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Tag* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Tag* New() const final {
    return CreateMaybeMessage<Tag>(nullptr);
  }

  Tag* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Tag>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Tag& from);
  void MergeFrom(const Tag& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Tag* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OC.Tag";
  }
  protected:
  explicit Tag(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OC_2eproto);
    return ::descriptor_table_OC_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kTagSetIdFieldNumber = 2,
    kTypeIdFieldNumber = 3,
    kAlphaFieldNumber = 4,
    kDateFieldNumber = 5,
    kTimeFieldNumber = 6,
    kNumberFieldNumber = 7,
    kRGBFieldNumber = 8,
  };
  // int64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 tagSetId = 2;
  void clear_tagsetid();
  ::PROTOBUF_NAMESPACE_ID::int64 tagsetid() const;
  void set_tagsetid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_tagsetid() const;
  void _internal_set_tagsetid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 typeId = 3;
  void clear_typeid_();
  ::PROTOBUF_NAMESPACE_ID::int64 typeid_() const;
  void set_typeid_(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_typeid_() const;
  void _internal_set_typeid_(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .OC.AlphanumericalTag alpha = 4;
  bool has_alpha() const;
  private:
  bool _internal_has_alpha() const;
  public:
  void clear_alpha();
  const ::OC::AlphanumericalTag& alpha() const;
  ::OC::AlphanumericalTag* release_alpha();
  ::OC::AlphanumericalTag* mutable_alpha();
  void set_allocated_alpha(::OC::AlphanumericalTag* alpha);
  private:
  const ::OC::AlphanumericalTag& _internal_alpha() const;
  ::OC::AlphanumericalTag* _internal_mutable_alpha();
  public:
  void unsafe_arena_set_allocated_alpha(
      ::OC::AlphanumericalTag* alpha);
  ::OC::AlphanumericalTag* unsafe_arena_release_alpha();

  // .OC.DateTag date = 5;
  bool has_date() const;
  private:
  bool _internal_has_date() const;
  public:
  void clear_date();
  const ::OC::DateTag& date() const;
  ::OC::DateTag* release_date();
  ::OC::DateTag* mutable_date();
  void set_allocated_date(::OC::DateTag* date);
  private:
  const ::OC::DateTag& _internal_date() const;
  ::OC::DateTag* _internal_mutable_date();
  public:
  void unsafe_arena_set_allocated_date(
      ::OC::DateTag* date);
  ::OC::DateTag* unsafe_arena_release_date();

  // .OC.TimeTag time = 6;
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  const ::OC::TimeTag& time() const;
  ::OC::TimeTag* release_time();
  ::OC::TimeTag* mutable_time();
  void set_allocated_time(::OC::TimeTag* time);
  private:
  const ::OC::TimeTag& _internal_time() const;
  ::OC::TimeTag* _internal_mutable_time();
  public:
  void unsafe_arena_set_allocated_time(
      ::OC::TimeTag* time);
  ::OC::TimeTag* unsafe_arena_release_time();

  // .OC.NumericalTag number = 7;
  bool has_number() const;
  private:
  bool _internal_has_number() const;
  public:
  void clear_number();
  const ::OC::NumericalTag& number() const;
  ::OC::NumericalTag* release_number();
  ::OC::NumericalTag* mutable_number();
  void set_allocated_number(::OC::NumericalTag* number);
  private:
  const ::OC::NumericalTag& _internal_number() const;
  ::OC::NumericalTag* _internal_mutable_number();
  public:
  void unsafe_arena_set_allocated_number(
      ::OC::NumericalTag* number);
  ::OC::NumericalTag* unsafe_arena_release_number();

  // .OC.RGBTag RGB = 8;
  bool has_rgb() const;
  private:
  bool _internal_has_rgb() const;
  public:
  void clear_rgb();
  const ::OC::RGBTag& rgb() const;
  ::OC::RGBTag* release_rgb();
  ::OC::RGBTag* mutable_rgb();
  void set_allocated_rgb(::OC::RGBTag* rgb);
  private:
  const ::OC::RGBTag& _internal_rgb() const;
  ::OC::RGBTag* _internal_mutable_rgb();
  public:
  void unsafe_arena_set_allocated_rgb(
      ::OC::RGBTag* rgb);
  ::OC::RGBTag* unsafe_arena_release_rgb();

  void clear_payload();
  PayloadCase payload_case() const;
  // @@protoc_insertion_point(class_scope:OC.Tag)
 private:
  class _Internal;
  void set_has_alpha();
  void set_has_date();
  void set_has_time();
  void set_has_number();
  void set_has_rgb();

  inline bool has_payload() const;
  inline void clear_has_payload();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  ::PROTOBUF_NAMESPACE_ID::int64 tagsetid_;
  ::PROTOBUF_NAMESPACE_ID::int64 typeid__;
  union PayloadUnion {
    PayloadUnion() {}
    ::OC::AlphanumericalTag* alpha_;
    ::OC::DateTag* date_;
    ::OC::TimeTag* time_;
    ::OC::NumericalTag* number_;
    ::OC::RGBTag* rgb_;
  } payload_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_OC_2eproto;
};
// -------------------------------------------------------------------

class GetTagRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OC.GetTagRequest) */ {
 public:
  inline GetTagRequest() : GetTagRequest(nullptr) {}
  virtual ~GetTagRequest();

  GetTagRequest(const GetTagRequest& from);
  GetTagRequest(GetTagRequest&& from) noexcept
    : GetTagRequest() {
    *this = ::std::move(from);
  }

  inline GetTagRequest& operator=(const GetTagRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTagRequest& operator=(GetTagRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetTagRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetTagRequest* internal_default_instance() {
    return reinterpret_cast<const GetTagRequest*>(
               &_GetTagRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GetTagRequest& a, GetTagRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTagRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTagRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetTagRequest* New() const final {
    return CreateMaybeMessage<GetTagRequest>(nullptr);
  }

  GetTagRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetTagRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetTagRequest& from);
  void MergeFrom(const GetTagRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTagRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OC.GetTagRequest";
  }
  protected:
  explicit GetTagRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OC_2eproto);
    return ::descriptor_table_OC_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // int64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:OC.GetTagRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OC_2eproto;
};
// -------------------------------------------------------------------

class GetTagResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OC.GetTagResponse) */ {
 public:
  inline GetTagResponse() : GetTagResponse(nullptr) {}
  virtual ~GetTagResponse();

  GetTagResponse(const GetTagResponse& from);
  GetTagResponse(GetTagResponse&& from) noexcept
    : GetTagResponse() {
    *this = ::std::move(from);
  }

  inline GetTagResponse& operator=(const GetTagResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTagResponse& operator=(GetTagResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetTagResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetTagResponse* internal_default_instance() {
    return reinterpret_cast<const GetTagResponse*>(
               &_GetTagResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GetTagResponse& a, GetTagResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTagResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTagResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetTagResponse* New() const final {
    return CreateMaybeMessage<GetTagResponse>(nullptr);
  }

  GetTagResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetTagResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetTagResponse& from);
  void MergeFrom(const GetTagResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTagResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OC.GetTagResponse";
  }
  protected:
  explicit GetTagResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OC_2eproto);
    return ::descriptor_table_OC_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagFieldNumber = 1,
  };
  // .OC.Tag tag = 1;
  bool has_tag() const;
  private:
  bool _internal_has_tag() const;
  public:
  void clear_tag();
  const ::OC::Tag& tag() const;
  ::OC::Tag* release_tag();
  ::OC::Tag* mutable_tag();
  void set_allocated_tag(::OC::Tag* tag);
  private:
  const ::OC::Tag& _internal_tag() const;
  ::OC::Tag* _internal_mutable_tag();
  public:
  void unsafe_arena_set_allocated_tag(
      ::OC::Tag* tag);
  ::OC::Tag* unsafe_arena_release_tag();

  // @@protoc_insertion_point(class_scope:OC.GetTagResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::OC::Tag* tag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OC_2eproto;
};
// -------------------------------------------------------------------

class Empty PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OC.Empty) */ {
 public:
  inline Empty() : Empty(nullptr) {}
  virtual ~Empty();

  Empty(const Empty& from);
  Empty(Empty&& from) noexcept
    : Empty() {
    *this = ::std::move(from);
  }

  inline Empty& operator=(const Empty& from) {
    CopyFrom(from);
    return *this;
  }
  inline Empty& operator=(Empty&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Empty& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Empty* internal_default_instance() {
    return reinterpret_cast<const Empty*>(
               &_Empty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Empty& a, Empty& b) {
    a.Swap(&b);
  }
  inline void Swap(Empty* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Empty* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Empty* New() const final {
    return CreateMaybeMessage<Empty>(nullptr);
  }

  Empty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Empty>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Empty& from);
  void MergeFrom(const Empty& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Empty* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OC.Empty";
  }
  protected:
  explicit Empty(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OC_2eproto);
    return ::descriptor_table_OC_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:OC.Empty)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OC_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AlphanumericalTag

// string name = 1;
inline void AlphanumericalTag::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AlphanumericalTag::name() const {
  // @@protoc_insertion_point(field_get:OC.AlphanumericalTag.name)
  return _internal_name();
}
inline void AlphanumericalTag::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:OC.AlphanumericalTag.name)
}
inline std::string* AlphanumericalTag::mutable_name() {
  // @@protoc_insertion_point(field_mutable:OC.AlphanumericalTag.name)
  return _internal_mutable_name();
}
inline const std::string& AlphanumericalTag::_internal_name() const {
  return name_.Get();
}
inline void AlphanumericalTag::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AlphanumericalTag::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:OC.AlphanumericalTag.name)
}
inline void AlphanumericalTag::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:OC.AlphanumericalTag.name)
}
inline void AlphanumericalTag::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:OC.AlphanumericalTag.name)
}
inline std::string* AlphanumericalTag::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AlphanumericalTag::release_name() {
  // @@protoc_insertion_point(field_release:OC.AlphanumericalTag.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AlphanumericalTag::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:OC.AlphanumericalTag.name)
}

// -------------------------------------------------------------------

// DateTag

// uint32 year = 1;
inline void DateTag::clear_year() {
  year_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DateTag::_internal_year() const {
  return year_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DateTag::year() const {
  // @@protoc_insertion_point(field_get:OC.DateTag.year)
  return _internal_year();
}
inline void DateTag::_internal_set_year(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  year_ = value;
}
inline void DateTag::set_year(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_year(value);
  // @@protoc_insertion_point(field_set:OC.DateTag.year)
}

// uint32 month = 2;
inline void DateTag::clear_month() {
  month_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DateTag::_internal_month() const {
  return month_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DateTag::month() const {
  // @@protoc_insertion_point(field_get:OC.DateTag.month)
  return _internal_month();
}
inline void DateTag::_internal_set_month(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  month_ = value;
}
inline void DateTag::set_month(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_month(value);
  // @@protoc_insertion_point(field_set:OC.DateTag.month)
}

// uint32 day = 3;
inline void DateTag::clear_day() {
  day_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DateTag::_internal_day() const {
  return day_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DateTag::day() const {
  // @@protoc_insertion_point(field_get:OC.DateTag.day)
  return _internal_day();
}
inline void DateTag::_internal_set_day(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  day_ = value;
}
inline void DateTag::set_day(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_day(value);
  // @@protoc_insertion_point(field_set:OC.DateTag.day)
}

// -------------------------------------------------------------------

// TimeTag

// uint32 hours = 1;
inline void TimeTag::clear_hours() {
  hours_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TimeTag::_internal_hours() const {
  return hours_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TimeTag::hours() const {
  // @@protoc_insertion_point(field_get:OC.TimeTag.hours)
  return _internal_hours();
}
inline void TimeTag::_internal_set_hours(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  hours_ = value;
}
inline void TimeTag::set_hours(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_hours(value);
  // @@protoc_insertion_point(field_set:OC.TimeTag.hours)
}

// uint32 minutes = 2;
inline void TimeTag::clear_minutes() {
  minutes_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TimeTag::_internal_minutes() const {
  return minutes_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TimeTag::minutes() const {
  // @@protoc_insertion_point(field_get:OC.TimeTag.minutes)
  return _internal_minutes();
}
inline void TimeTag::_internal_set_minutes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  minutes_ = value;
}
inline void TimeTag::set_minutes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_minutes(value);
  // @@protoc_insertion_point(field_set:OC.TimeTag.minutes)
}

// uint32 seconds = 3;
inline void TimeTag::clear_seconds() {
  seconds_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TimeTag::_internal_seconds() const {
  return seconds_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TimeTag::seconds() const {
  // @@protoc_insertion_point(field_get:OC.TimeTag.seconds)
  return _internal_seconds();
}
inline void TimeTag::_internal_set_seconds(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  seconds_ = value;
}
inline void TimeTag::set_seconds(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_seconds(value);
  // @@protoc_insertion_point(field_set:OC.TimeTag.seconds)
}

// uint32 milliseconds = 4;
inline void TimeTag::clear_milliseconds() {
  milliseconds_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TimeTag::_internal_milliseconds() const {
  return milliseconds_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TimeTag::milliseconds() const {
  // @@protoc_insertion_point(field_get:OC.TimeTag.milliseconds)
  return _internal_milliseconds();
}
inline void TimeTag::_internal_set_milliseconds(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  milliseconds_ = value;
}
inline void TimeTag::set_milliseconds(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_milliseconds(value);
  // @@protoc_insertion_point(field_set:OC.TimeTag.milliseconds)
}

// -------------------------------------------------------------------

// NumericalTag

// int64 number = 1;
inline void NumericalTag::clear_number() {
  number_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NumericalTag::_internal_number() const {
  return number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NumericalTag::number() const {
  // @@protoc_insertion_point(field_get:OC.NumericalTag.number)
  return _internal_number();
}
inline void NumericalTag::_internal_set_number(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  number_ = value;
}
inline void NumericalTag::set_number(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_number(value);
  // @@protoc_insertion_point(field_set:OC.NumericalTag.number)
}

// -------------------------------------------------------------------

// RGBTag

// string name = 1;
inline void RGBTag::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RGBTag::name() const {
  // @@protoc_insertion_point(field_get:OC.RGBTag.name)
  return _internal_name();
}
inline void RGBTag::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:OC.RGBTag.name)
}
inline std::string* RGBTag::mutable_name() {
  // @@protoc_insertion_point(field_mutable:OC.RGBTag.name)
  return _internal_mutable_name();
}
inline const std::string& RGBTag::_internal_name() const {
  return name_.Get();
}
inline void RGBTag::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RGBTag::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:OC.RGBTag.name)
}
inline void RGBTag::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:OC.RGBTag.name)
}
inline void RGBTag::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:OC.RGBTag.name)
}
inline std::string* RGBTag::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RGBTag::release_name() {
  // @@protoc_insertion_point(field_release:OC.RGBTag.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RGBTag::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:OC.RGBTag.name)
}

// -------------------------------------------------------------------

// Tag

// int64 id = 1;
inline void Tag::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Tag::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Tag::id() const {
  // @@protoc_insertion_point(field_get:OC.Tag.id)
  return _internal_id();
}
inline void Tag::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void Tag::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:OC.Tag.id)
}

// int64 tagSetId = 2;
inline void Tag::clear_tagsetid() {
  tagsetid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Tag::_internal_tagsetid() const {
  return tagsetid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Tag::tagsetid() const {
  // @@protoc_insertion_point(field_get:OC.Tag.tagSetId)
  return _internal_tagsetid();
}
inline void Tag::_internal_set_tagsetid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  tagsetid_ = value;
}
inline void Tag::set_tagsetid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_tagsetid(value);
  // @@protoc_insertion_point(field_set:OC.Tag.tagSetId)
}

// int64 typeId = 3;
inline void Tag::clear_typeid_() {
  typeid__ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Tag::_internal_typeid_() const {
  return typeid__;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Tag::typeid_() const {
  // @@protoc_insertion_point(field_get:OC.Tag.typeId)
  return _internal_typeid_();
}
inline void Tag::_internal_set_typeid_(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  typeid__ = value;
}
inline void Tag::set_typeid_(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_typeid_(value);
  // @@protoc_insertion_point(field_set:OC.Tag.typeId)
}

// .OC.AlphanumericalTag alpha = 4;
inline bool Tag::_internal_has_alpha() const {
  return payload_case() == kAlpha;
}
inline bool Tag::has_alpha() const {
  return _internal_has_alpha();
}
inline void Tag::set_has_alpha() {
  _oneof_case_[0] = kAlpha;
}
inline void Tag::clear_alpha() {
  if (_internal_has_alpha()) {
    if (GetArena() == nullptr) {
      delete payload_.alpha_;
    }
    clear_has_payload();
  }
}
inline ::OC::AlphanumericalTag* Tag::release_alpha() {
  // @@protoc_insertion_point(field_release:OC.Tag.alpha)
  if (_internal_has_alpha()) {
    clear_has_payload();
      ::OC::AlphanumericalTag* temp = payload_.alpha_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.alpha_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::OC::AlphanumericalTag& Tag::_internal_alpha() const {
  return _internal_has_alpha()
      ? *payload_.alpha_
      : *reinterpret_cast< ::OC::AlphanumericalTag*>(&::OC::_AlphanumericalTag_default_instance_);
}
inline const ::OC::AlphanumericalTag& Tag::alpha() const {
  // @@protoc_insertion_point(field_get:OC.Tag.alpha)
  return _internal_alpha();
}
inline ::OC::AlphanumericalTag* Tag::unsafe_arena_release_alpha() {
  // @@protoc_insertion_point(field_unsafe_arena_release:OC.Tag.alpha)
  if (_internal_has_alpha()) {
    clear_has_payload();
    ::OC::AlphanumericalTag* temp = payload_.alpha_;
    payload_.alpha_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Tag::unsafe_arena_set_allocated_alpha(::OC::AlphanumericalTag* alpha) {
  clear_payload();
  if (alpha) {
    set_has_alpha();
    payload_.alpha_ = alpha;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OC.Tag.alpha)
}
inline ::OC::AlphanumericalTag* Tag::_internal_mutable_alpha() {
  if (!_internal_has_alpha()) {
    clear_payload();
    set_has_alpha();
    payload_.alpha_ = CreateMaybeMessage< ::OC::AlphanumericalTag >(GetArena());
  }
  return payload_.alpha_;
}
inline ::OC::AlphanumericalTag* Tag::mutable_alpha() {
  // @@protoc_insertion_point(field_mutable:OC.Tag.alpha)
  return _internal_mutable_alpha();
}

// .OC.DateTag date = 5;
inline bool Tag::_internal_has_date() const {
  return payload_case() == kDate;
}
inline bool Tag::has_date() const {
  return _internal_has_date();
}
inline void Tag::set_has_date() {
  _oneof_case_[0] = kDate;
}
inline void Tag::clear_date() {
  if (_internal_has_date()) {
    if (GetArena() == nullptr) {
      delete payload_.date_;
    }
    clear_has_payload();
  }
}
inline ::OC::DateTag* Tag::release_date() {
  // @@protoc_insertion_point(field_release:OC.Tag.date)
  if (_internal_has_date()) {
    clear_has_payload();
      ::OC::DateTag* temp = payload_.date_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.date_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::OC::DateTag& Tag::_internal_date() const {
  return _internal_has_date()
      ? *payload_.date_
      : *reinterpret_cast< ::OC::DateTag*>(&::OC::_DateTag_default_instance_);
}
inline const ::OC::DateTag& Tag::date() const {
  // @@protoc_insertion_point(field_get:OC.Tag.date)
  return _internal_date();
}
inline ::OC::DateTag* Tag::unsafe_arena_release_date() {
  // @@protoc_insertion_point(field_unsafe_arena_release:OC.Tag.date)
  if (_internal_has_date()) {
    clear_has_payload();
    ::OC::DateTag* temp = payload_.date_;
    payload_.date_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Tag::unsafe_arena_set_allocated_date(::OC::DateTag* date) {
  clear_payload();
  if (date) {
    set_has_date();
    payload_.date_ = date;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OC.Tag.date)
}
inline ::OC::DateTag* Tag::_internal_mutable_date() {
  if (!_internal_has_date()) {
    clear_payload();
    set_has_date();
    payload_.date_ = CreateMaybeMessage< ::OC::DateTag >(GetArena());
  }
  return payload_.date_;
}
inline ::OC::DateTag* Tag::mutable_date() {
  // @@protoc_insertion_point(field_mutable:OC.Tag.date)
  return _internal_mutable_date();
}

// .OC.TimeTag time = 6;
inline bool Tag::_internal_has_time() const {
  return payload_case() == kTime;
}
inline bool Tag::has_time() const {
  return _internal_has_time();
}
inline void Tag::set_has_time() {
  _oneof_case_[0] = kTime;
}
inline void Tag::clear_time() {
  if (_internal_has_time()) {
    if (GetArena() == nullptr) {
      delete payload_.time_;
    }
    clear_has_payload();
  }
}
inline ::OC::TimeTag* Tag::release_time() {
  // @@protoc_insertion_point(field_release:OC.Tag.time)
  if (_internal_has_time()) {
    clear_has_payload();
      ::OC::TimeTag* temp = payload_.time_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.time_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::OC::TimeTag& Tag::_internal_time() const {
  return _internal_has_time()
      ? *payload_.time_
      : *reinterpret_cast< ::OC::TimeTag*>(&::OC::_TimeTag_default_instance_);
}
inline const ::OC::TimeTag& Tag::time() const {
  // @@protoc_insertion_point(field_get:OC.Tag.time)
  return _internal_time();
}
inline ::OC::TimeTag* Tag::unsafe_arena_release_time() {
  // @@protoc_insertion_point(field_unsafe_arena_release:OC.Tag.time)
  if (_internal_has_time()) {
    clear_has_payload();
    ::OC::TimeTag* temp = payload_.time_;
    payload_.time_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Tag::unsafe_arena_set_allocated_time(::OC::TimeTag* time) {
  clear_payload();
  if (time) {
    set_has_time();
    payload_.time_ = time;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OC.Tag.time)
}
inline ::OC::TimeTag* Tag::_internal_mutable_time() {
  if (!_internal_has_time()) {
    clear_payload();
    set_has_time();
    payload_.time_ = CreateMaybeMessage< ::OC::TimeTag >(GetArena());
  }
  return payload_.time_;
}
inline ::OC::TimeTag* Tag::mutable_time() {
  // @@protoc_insertion_point(field_mutable:OC.Tag.time)
  return _internal_mutable_time();
}

// .OC.NumericalTag number = 7;
inline bool Tag::_internal_has_number() const {
  return payload_case() == kNumber;
}
inline bool Tag::has_number() const {
  return _internal_has_number();
}
inline void Tag::set_has_number() {
  _oneof_case_[0] = kNumber;
}
inline void Tag::clear_number() {
  if (_internal_has_number()) {
    if (GetArena() == nullptr) {
      delete payload_.number_;
    }
    clear_has_payload();
  }
}
inline ::OC::NumericalTag* Tag::release_number() {
  // @@protoc_insertion_point(field_release:OC.Tag.number)
  if (_internal_has_number()) {
    clear_has_payload();
      ::OC::NumericalTag* temp = payload_.number_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.number_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::OC::NumericalTag& Tag::_internal_number() const {
  return _internal_has_number()
      ? *payload_.number_
      : *reinterpret_cast< ::OC::NumericalTag*>(&::OC::_NumericalTag_default_instance_);
}
inline const ::OC::NumericalTag& Tag::number() const {
  // @@protoc_insertion_point(field_get:OC.Tag.number)
  return _internal_number();
}
inline ::OC::NumericalTag* Tag::unsafe_arena_release_number() {
  // @@protoc_insertion_point(field_unsafe_arena_release:OC.Tag.number)
  if (_internal_has_number()) {
    clear_has_payload();
    ::OC::NumericalTag* temp = payload_.number_;
    payload_.number_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Tag::unsafe_arena_set_allocated_number(::OC::NumericalTag* number) {
  clear_payload();
  if (number) {
    set_has_number();
    payload_.number_ = number;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OC.Tag.number)
}
inline ::OC::NumericalTag* Tag::_internal_mutable_number() {
  if (!_internal_has_number()) {
    clear_payload();
    set_has_number();
    payload_.number_ = CreateMaybeMessage< ::OC::NumericalTag >(GetArena());
  }
  return payload_.number_;
}
inline ::OC::NumericalTag* Tag::mutable_number() {
  // @@protoc_insertion_point(field_mutable:OC.Tag.number)
  return _internal_mutable_number();
}

// .OC.RGBTag RGB = 8;
inline bool Tag::_internal_has_rgb() const {
  return payload_case() == kRGB;
}
inline bool Tag::has_rgb() const {
  return _internal_has_rgb();
}
inline void Tag::set_has_rgb() {
  _oneof_case_[0] = kRGB;
}
inline void Tag::clear_rgb() {
  if (_internal_has_rgb()) {
    if (GetArena() == nullptr) {
      delete payload_.rgb_;
    }
    clear_has_payload();
  }
}
inline ::OC::RGBTag* Tag::release_rgb() {
  // @@protoc_insertion_point(field_release:OC.Tag.RGB)
  if (_internal_has_rgb()) {
    clear_has_payload();
      ::OC::RGBTag* temp = payload_.rgb_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.rgb_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::OC::RGBTag& Tag::_internal_rgb() const {
  return _internal_has_rgb()
      ? *payload_.rgb_
      : *reinterpret_cast< ::OC::RGBTag*>(&::OC::_RGBTag_default_instance_);
}
inline const ::OC::RGBTag& Tag::rgb() const {
  // @@protoc_insertion_point(field_get:OC.Tag.RGB)
  return _internal_rgb();
}
inline ::OC::RGBTag* Tag::unsafe_arena_release_rgb() {
  // @@protoc_insertion_point(field_unsafe_arena_release:OC.Tag.RGB)
  if (_internal_has_rgb()) {
    clear_has_payload();
    ::OC::RGBTag* temp = payload_.rgb_;
    payload_.rgb_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Tag::unsafe_arena_set_allocated_rgb(::OC::RGBTag* rgb) {
  clear_payload();
  if (rgb) {
    set_has_rgb();
    payload_.rgb_ = rgb;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OC.Tag.RGB)
}
inline ::OC::RGBTag* Tag::_internal_mutable_rgb() {
  if (!_internal_has_rgb()) {
    clear_payload();
    set_has_rgb();
    payload_.rgb_ = CreateMaybeMessage< ::OC::RGBTag >(GetArena());
  }
  return payload_.rgb_;
}
inline ::OC::RGBTag* Tag::mutable_rgb() {
  // @@protoc_insertion_point(field_mutable:OC.Tag.RGB)
  return _internal_mutable_rgb();
}

inline bool Tag::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
inline void Tag::clear_has_payload() {
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}
inline Tag::PayloadCase Tag::payload_case() const {
  return Tag::PayloadCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// GetTagRequest

// int64 id = 1;
inline void GetTagRequest::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetTagRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetTagRequest::id() const {
  // @@protoc_insertion_point(field_get:OC.GetTagRequest.id)
  return _internal_id();
}
inline void GetTagRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void GetTagRequest::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:OC.GetTagRequest.id)
}

// -------------------------------------------------------------------

// GetTagResponse

// .OC.Tag tag = 1;
inline bool GetTagResponse::_internal_has_tag() const {
  return this != internal_default_instance() && tag_ != nullptr;
}
inline bool GetTagResponse::has_tag() const {
  return _internal_has_tag();
}
inline void GetTagResponse::clear_tag() {
  if (GetArena() == nullptr && tag_ != nullptr) {
    delete tag_;
  }
  tag_ = nullptr;
}
inline const ::OC::Tag& GetTagResponse::_internal_tag() const {
  const ::OC::Tag* p = tag_;
  return p != nullptr ? *p : *reinterpret_cast<const ::OC::Tag*>(
      &::OC::_Tag_default_instance_);
}
inline const ::OC::Tag& GetTagResponse::tag() const {
  // @@protoc_insertion_point(field_get:OC.GetTagResponse.tag)
  return _internal_tag();
}
inline void GetTagResponse::unsafe_arena_set_allocated_tag(
    ::OC::Tag* tag) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tag_);
  }
  tag_ = tag;
  if (tag) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OC.GetTagResponse.tag)
}
inline ::OC::Tag* GetTagResponse::release_tag() {
  
  ::OC::Tag* temp = tag_;
  tag_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::OC::Tag* GetTagResponse::unsafe_arena_release_tag() {
  // @@protoc_insertion_point(field_release:OC.GetTagResponse.tag)
  
  ::OC::Tag* temp = tag_;
  tag_ = nullptr;
  return temp;
}
inline ::OC::Tag* GetTagResponse::_internal_mutable_tag() {
  
  if (tag_ == nullptr) {
    auto* p = CreateMaybeMessage<::OC::Tag>(GetArena());
    tag_ = p;
  }
  return tag_;
}
inline ::OC::Tag* GetTagResponse::mutable_tag() {
  // @@protoc_insertion_point(field_mutable:OC.GetTagResponse.tag)
  return _internal_mutable_tag();
}
inline void GetTagResponse::set_allocated_tag(::OC::Tag* tag) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete tag_;
  }
  if (tag) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(tag);
    if (message_arena != submessage_arena) {
      tag = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tag, submessage_arena);
    }
    
  } else {
    
  }
  tag_ = tag;
  // @@protoc_insertion_point(field_set_allocated:OC.GetTagResponse.tag)
}

// -------------------------------------------------------------------

// Empty

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace OC

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_OC_2eproto
