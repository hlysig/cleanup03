// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: OC.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_OC_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_OC_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_OC_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_OC_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[22]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_OC_2eproto;
namespace OC {
class Empty;
class EmptyDefaultTypeInternal;
extern EmptyDefaultTypeInternal _Empty_default_instance_;
class GetObjectRequest;
class GetObjectRequestDefaultTypeInternal;
extern GetObjectRequestDefaultTypeInternal _GetObjectRequest_default_instance_;
class GetObjectResponse;
class GetObjectResponseDefaultTypeInternal;
extern GetObjectResponseDefaultTypeInternal _GetObjectResponse_default_instance_;
class GetObjectsRequest;
class GetObjectsRequestDefaultTypeInternal;
extern GetObjectsRequestDefaultTypeInternal _GetObjectsRequest_default_instance_;
class GetObjectsResponse;
class GetObjectsResponseDefaultTypeInternal;
extern GetObjectsResponseDefaultTypeInternal _GetObjectsResponse_default_instance_;
class GetTagRequest;
class GetTagRequestDefaultTypeInternal;
extern GetTagRequestDefaultTypeInternal _GetTagRequest_default_instance_;
class GetTagResponse;
class GetTagResponseDefaultTypeInternal;
extern GetTagResponseDefaultTypeInternal _GetTagResponse_default_instance_;
class GetTagSetRequest;
class GetTagSetRequestDefaultTypeInternal;
extern GetTagSetRequestDefaultTypeInternal _GetTagSetRequest_default_instance_;
class GetTagSetResponse;
class GetTagSetResponseDefaultTypeInternal;
extern GetTagSetResponseDefaultTypeInternal _GetTagSetResponse_default_instance_;
class GetTagSetsRequest;
class GetTagSetsRequestDefaultTypeInternal;
extern GetTagSetsRequestDefaultTypeInternal _GetTagSetsRequest_default_instance_;
class GetTagSetsResponse;
class GetTagSetsResponseDefaultTypeInternal;
extern GetTagSetsResponseDefaultTypeInternal _GetTagSetsResponse_default_instance_;
class GetTagsRequest;
class GetTagsRequestDefaultTypeInternal;
extern GetTagsRequestDefaultTypeInternal _GetTagsRequest_default_instance_;
class GetTagsResponse;
class GetTagsResponseDefaultTypeInternal;
extern GetTagsResponseDefaultTypeInternal _GetTagsResponse_default_instance_;
class Object;
class ObjectDefaultTypeInternal;
extern ObjectDefaultTypeInternal _Object_default_instance_;
class PutObjectRequest;
class PutObjectRequestDefaultTypeInternal;
extern PutObjectRequestDefaultTypeInternal _PutObjectRequest_default_instance_;
class PutObjectResponse;
class PutObjectResponseDefaultTypeInternal;
extern PutObjectResponseDefaultTypeInternal _PutObjectResponse_default_instance_;
class PutTagRequest;
class PutTagRequestDefaultTypeInternal;
extern PutTagRequestDefaultTypeInternal _PutTagRequest_default_instance_;
class PutTagResponse;
class PutTagResponseDefaultTypeInternal;
extern PutTagResponseDefaultTypeInternal _PutTagResponse_default_instance_;
class PutTagSetRequest;
class PutTagSetRequestDefaultTypeInternal;
extern PutTagSetRequestDefaultTypeInternal _PutTagSetRequest_default_instance_;
class PutTagSetResponse;
class PutTagSetResponseDefaultTypeInternal;
extern PutTagSetResponseDefaultTypeInternal _PutTagSetResponse_default_instance_;
class Tag;
class TagDefaultTypeInternal;
extern TagDefaultTypeInternal _Tag_default_instance_;
class TagSet;
class TagSetDefaultTypeInternal;
extern TagSetDefaultTypeInternal _TagSet_default_instance_;
}  // namespace OC
PROTOBUF_NAMESPACE_OPEN
template<> ::OC::Empty* Arena::CreateMaybeMessage<::OC::Empty>(Arena*);
template<> ::OC::GetObjectRequest* Arena::CreateMaybeMessage<::OC::GetObjectRequest>(Arena*);
template<> ::OC::GetObjectResponse* Arena::CreateMaybeMessage<::OC::GetObjectResponse>(Arena*);
template<> ::OC::GetObjectsRequest* Arena::CreateMaybeMessage<::OC::GetObjectsRequest>(Arena*);
template<> ::OC::GetObjectsResponse* Arena::CreateMaybeMessage<::OC::GetObjectsResponse>(Arena*);
template<> ::OC::GetTagRequest* Arena::CreateMaybeMessage<::OC::GetTagRequest>(Arena*);
template<> ::OC::GetTagResponse* Arena::CreateMaybeMessage<::OC::GetTagResponse>(Arena*);
template<> ::OC::GetTagSetRequest* Arena::CreateMaybeMessage<::OC::GetTagSetRequest>(Arena*);
template<> ::OC::GetTagSetResponse* Arena::CreateMaybeMessage<::OC::GetTagSetResponse>(Arena*);
template<> ::OC::GetTagSetsRequest* Arena::CreateMaybeMessage<::OC::GetTagSetsRequest>(Arena*);
template<> ::OC::GetTagSetsResponse* Arena::CreateMaybeMessage<::OC::GetTagSetsResponse>(Arena*);
template<> ::OC::GetTagsRequest* Arena::CreateMaybeMessage<::OC::GetTagsRequest>(Arena*);
template<> ::OC::GetTagsResponse* Arena::CreateMaybeMessage<::OC::GetTagsResponse>(Arena*);
template<> ::OC::Object* Arena::CreateMaybeMessage<::OC::Object>(Arena*);
template<> ::OC::PutObjectRequest* Arena::CreateMaybeMessage<::OC::PutObjectRequest>(Arena*);
template<> ::OC::PutObjectResponse* Arena::CreateMaybeMessage<::OC::PutObjectResponse>(Arena*);
template<> ::OC::PutTagRequest* Arena::CreateMaybeMessage<::OC::PutTagRequest>(Arena*);
template<> ::OC::PutTagResponse* Arena::CreateMaybeMessage<::OC::PutTagResponse>(Arena*);
template<> ::OC::PutTagSetRequest* Arena::CreateMaybeMessage<::OC::PutTagSetRequest>(Arena*);
template<> ::OC::PutTagSetResponse* Arena::CreateMaybeMessage<::OC::PutTagSetResponse>(Arena*);
template<> ::OC::Tag* Arena::CreateMaybeMessage<::OC::Tag>(Arena*);
template<> ::OC::TagSet* Arena::CreateMaybeMessage<::OC::TagSet>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace OC {

// ===================================================================

class Object PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OC.Object) */ {
 public:
  inline Object() : Object(nullptr) {}
  virtual ~Object();

  Object(const Object& from);
  Object(Object&& from) noexcept
    : Object() {
    *this = ::std::move(from);
  }

  inline Object& operator=(const Object& from) {
    CopyFrom(from);
    return *this;
  }
  inline Object& operator=(Object&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Object& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Object* internal_default_instance() {
    return reinterpret_cast<const Object*>(
               &_Object_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Object& a, Object& b) {
    a.Swap(&b);
  }
  inline void Swap(Object* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Object* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Object* New() const final {
    return CreateMaybeMessage<Object>(nullptr);
  }

  Object* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Object>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Object& from);
  void MergeFrom(const Object& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Object* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OC.Object";
  }
  protected:
  explicit Object(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OC_2eproto);
    return ::descriptor_table_OC_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kThumbnailFieldNumber = 3,
    kFileTypeFieldNumber = 4,
    kIdFieldNumber = 1,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string thumbnail = 3;
  void clear_thumbnail();
  const std::string& thumbnail() const;
  void set_thumbnail(const std::string& value);
  void set_thumbnail(std::string&& value);
  void set_thumbnail(const char* value);
  void set_thumbnail(const char* value, size_t size);
  std::string* mutable_thumbnail();
  std::string* release_thumbnail();
  void set_allocated_thumbnail(std::string* thumbnail);
  private:
  const std::string& _internal_thumbnail() const;
  void _internal_set_thumbnail(const std::string& value);
  std::string* _internal_mutable_thumbnail();
  public:

  // string fileType = 4;
  void clear_filetype();
  const std::string& filetype() const;
  void set_filetype(const std::string& value);
  void set_filetype(std::string&& value);
  void set_filetype(const char* value);
  void set_filetype(const char* value, size_t size);
  std::string* mutable_filetype();
  std::string* release_filetype();
  void set_allocated_filetype(std::string* filetype);
  private:
  const std::string& _internal_filetype() const;
  void _internal_set_filetype(const std::string& value);
  std::string* _internal_mutable_filetype();
  public:

  // int64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:OC.Object)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr thumbnail_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filetype_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OC_2eproto;
};
// -------------------------------------------------------------------

class GetObjectsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OC.GetObjectsRequest) */ {
 public:
  inline GetObjectsRequest() : GetObjectsRequest(nullptr) {}
  virtual ~GetObjectsRequest();

  GetObjectsRequest(const GetObjectsRequest& from);
  GetObjectsRequest(GetObjectsRequest&& from) noexcept
    : GetObjectsRequest() {
    *this = ::std::move(from);
  }

  inline GetObjectsRequest& operator=(const GetObjectsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetObjectsRequest& operator=(GetObjectsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetObjectsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetObjectsRequest* internal_default_instance() {
    return reinterpret_cast<const GetObjectsRequest*>(
               &_GetObjectsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GetObjectsRequest& a, GetObjectsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetObjectsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetObjectsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetObjectsRequest* New() const final {
    return CreateMaybeMessage<GetObjectsRequest>(nullptr);
  }

  GetObjectsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetObjectsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetObjectsRequest& from);
  void MergeFrom(const GetObjectsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetObjectsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OC.GetObjectsRequest";
  }
  protected:
  explicit GetObjectsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OC_2eproto);
    return ::descriptor_table_OC_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:OC.GetObjectsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OC_2eproto;
};
// -------------------------------------------------------------------

class GetObjectsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OC.GetObjectsResponse) */ {
 public:
  inline GetObjectsResponse() : GetObjectsResponse(nullptr) {}
  virtual ~GetObjectsResponse();

  GetObjectsResponse(const GetObjectsResponse& from);
  GetObjectsResponse(GetObjectsResponse&& from) noexcept
    : GetObjectsResponse() {
    *this = ::std::move(from);
  }

  inline GetObjectsResponse& operator=(const GetObjectsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetObjectsResponse& operator=(GetObjectsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetObjectsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetObjectsResponse* internal_default_instance() {
    return reinterpret_cast<const GetObjectsResponse*>(
               &_GetObjectsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetObjectsResponse& a, GetObjectsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetObjectsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetObjectsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetObjectsResponse* New() const final {
    return CreateMaybeMessage<GetObjectsResponse>(nullptr);
  }

  GetObjectsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetObjectsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetObjectsResponse& from);
  void MergeFrom(const GetObjectsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetObjectsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OC.GetObjectsResponse";
  }
  protected:
  explicit GetObjectsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OC_2eproto);
    return ::descriptor_table_OC_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectsFieldNumber = 1,
  };
  // repeated .OC.Object objects = 1;
  int objects_size() const;
  private:
  int _internal_objects_size() const;
  public:
  void clear_objects();
  ::OC::Object* mutable_objects(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OC::Object >*
      mutable_objects();
  private:
  const ::OC::Object& _internal_objects(int index) const;
  ::OC::Object* _internal_add_objects();
  public:
  const ::OC::Object& objects(int index) const;
  ::OC::Object* add_objects();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OC::Object >&
      objects() const;

  // @@protoc_insertion_point(class_scope:OC.GetObjectsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OC::Object > objects_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OC_2eproto;
};
// -------------------------------------------------------------------

class GetObjectRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OC.GetObjectRequest) */ {
 public:
  inline GetObjectRequest() : GetObjectRequest(nullptr) {}
  virtual ~GetObjectRequest();

  GetObjectRequest(const GetObjectRequest& from);
  GetObjectRequest(GetObjectRequest&& from) noexcept
    : GetObjectRequest() {
    *this = ::std::move(from);
  }

  inline GetObjectRequest& operator=(const GetObjectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetObjectRequest& operator=(GetObjectRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetObjectRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetObjectRequest* internal_default_instance() {
    return reinterpret_cast<const GetObjectRequest*>(
               &_GetObjectRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetObjectRequest& a, GetObjectRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetObjectRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetObjectRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetObjectRequest* New() const final {
    return CreateMaybeMessage<GetObjectRequest>(nullptr);
  }

  GetObjectRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetObjectRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetObjectRequest& from);
  void MergeFrom(const GetObjectRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetObjectRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OC.GetObjectRequest";
  }
  protected:
  explicit GetObjectRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OC_2eproto);
    return ::descriptor_table_OC_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // int64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:OC.GetObjectRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OC_2eproto;
};
// -------------------------------------------------------------------

class GetObjectResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OC.GetObjectResponse) */ {
 public:
  inline GetObjectResponse() : GetObjectResponse(nullptr) {}
  virtual ~GetObjectResponse();

  GetObjectResponse(const GetObjectResponse& from);
  GetObjectResponse(GetObjectResponse&& from) noexcept
    : GetObjectResponse() {
    *this = ::std::move(from);
  }

  inline GetObjectResponse& operator=(const GetObjectResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetObjectResponse& operator=(GetObjectResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetObjectResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetObjectResponse* internal_default_instance() {
    return reinterpret_cast<const GetObjectResponse*>(
               &_GetObjectResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GetObjectResponse& a, GetObjectResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetObjectResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetObjectResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetObjectResponse* New() const final {
    return CreateMaybeMessage<GetObjectResponse>(nullptr);
  }

  GetObjectResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetObjectResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetObjectResponse& from);
  void MergeFrom(const GetObjectResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetObjectResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OC.GetObjectResponse";
  }
  protected:
  explicit GetObjectResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OC_2eproto);
    return ::descriptor_table_OC_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectFieldNumber = 1,
  };
  // .OC.Object object = 1;
  bool has_object() const;
  private:
  bool _internal_has_object() const;
  public:
  void clear_object();
  const ::OC::Object& object() const;
  ::OC::Object* release_object();
  ::OC::Object* mutable_object();
  void set_allocated_object(::OC::Object* object);
  private:
  const ::OC::Object& _internal_object() const;
  ::OC::Object* _internal_mutable_object();
  public:
  void unsafe_arena_set_allocated_object(
      ::OC::Object* object);
  ::OC::Object* unsafe_arena_release_object();

  // @@protoc_insertion_point(class_scope:OC.GetObjectResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::OC::Object* object_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OC_2eproto;
};
// -------------------------------------------------------------------

class PutObjectRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OC.PutObjectRequest) */ {
 public:
  inline PutObjectRequest() : PutObjectRequest(nullptr) {}
  virtual ~PutObjectRequest();

  PutObjectRequest(const PutObjectRequest& from);
  PutObjectRequest(PutObjectRequest&& from) noexcept
    : PutObjectRequest() {
    *this = ::std::move(from);
  }

  inline PutObjectRequest& operator=(const PutObjectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PutObjectRequest& operator=(PutObjectRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PutObjectRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PutObjectRequest* internal_default_instance() {
    return reinterpret_cast<const PutObjectRequest*>(
               &_PutObjectRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PutObjectRequest& a, PutObjectRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PutObjectRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PutObjectRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PutObjectRequest* New() const final {
    return CreateMaybeMessage<PutObjectRequest>(nullptr);
  }

  PutObjectRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PutObjectRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PutObjectRequest& from);
  void MergeFrom(const PutObjectRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PutObjectRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OC.PutObjectRequest";
  }
  protected:
  explicit PutObjectRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OC_2eproto);
    return ::descriptor_table_OC_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kThumbnailFieldNumber = 2,
    kFileTypeFieldNumber = 3,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string thumbnail = 2;
  void clear_thumbnail();
  const std::string& thumbnail() const;
  void set_thumbnail(const std::string& value);
  void set_thumbnail(std::string&& value);
  void set_thumbnail(const char* value);
  void set_thumbnail(const char* value, size_t size);
  std::string* mutable_thumbnail();
  std::string* release_thumbnail();
  void set_allocated_thumbnail(std::string* thumbnail);
  private:
  const std::string& _internal_thumbnail() const;
  void _internal_set_thumbnail(const std::string& value);
  std::string* _internal_mutable_thumbnail();
  public:

  // string fileType = 3;
  void clear_filetype();
  const std::string& filetype() const;
  void set_filetype(const std::string& value);
  void set_filetype(std::string&& value);
  void set_filetype(const char* value);
  void set_filetype(const char* value, size_t size);
  std::string* mutable_filetype();
  std::string* release_filetype();
  void set_allocated_filetype(std::string* filetype);
  private:
  const std::string& _internal_filetype() const;
  void _internal_set_filetype(const std::string& value);
  std::string* _internal_mutable_filetype();
  public:

  // @@protoc_insertion_point(class_scope:OC.PutObjectRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr thumbnail_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filetype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OC_2eproto;
};
// -------------------------------------------------------------------

class PutObjectResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OC.PutObjectResponse) */ {
 public:
  inline PutObjectResponse() : PutObjectResponse(nullptr) {}
  virtual ~PutObjectResponse();

  PutObjectResponse(const PutObjectResponse& from);
  PutObjectResponse(PutObjectResponse&& from) noexcept
    : PutObjectResponse() {
    *this = ::std::move(from);
  }

  inline PutObjectResponse& operator=(const PutObjectResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PutObjectResponse& operator=(PutObjectResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PutObjectResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PutObjectResponse* internal_default_instance() {
    return reinterpret_cast<const PutObjectResponse*>(
               &_PutObjectResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(PutObjectResponse& a, PutObjectResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PutObjectResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PutObjectResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PutObjectResponse* New() const final {
    return CreateMaybeMessage<PutObjectResponse>(nullptr);
  }

  PutObjectResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PutObjectResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PutObjectResponse& from);
  void MergeFrom(const PutObjectResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PutObjectResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OC.PutObjectResponse";
  }
  protected:
  explicit PutObjectResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OC_2eproto);
    return ::descriptor_table_OC_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectFieldNumber = 1,
  };
  // .OC.Object object = 1;
  bool has_object() const;
  private:
  bool _internal_has_object() const;
  public:
  void clear_object();
  const ::OC::Object& object() const;
  ::OC::Object* release_object();
  ::OC::Object* mutable_object();
  void set_allocated_object(::OC::Object* object);
  private:
  const ::OC::Object& _internal_object() const;
  ::OC::Object* _internal_mutable_object();
  public:
  void unsafe_arena_set_allocated_object(
      ::OC::Object* object);
  ::OC::Object* unsafe_arena_release_object();

  // @@protoc_insertion_point(class_scope:OC.PutObjectResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::OC::Object* object_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OC_2eproto;
};
// -------------------------------------------------------------------

class TagSet PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OC.TagSet) */ {
 public:
  inline TagSet() : TagSet(nullptr) {}
  virtual ~TagSet();

  TagSet(const TagSet& from);
  TagSet(TagSet&& from) noexcept
    : TagSet() {
    *this = ::std::move(from);
  }

  inline TagSet& operator=(const TagSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline TagSet& operator=(TagSet&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TagSet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TagSet* internal_default_instance() {
    return reinterpret_cast<const TagSet*>(
               &_TagSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(TagSet& a, TagSet& b) {
    a.Swap(&b);
  }
  inline void Swap(TagSet* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TagSet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TagSet* New() const final {
    return CreateMaybeMessage<TagSet>(nullptr);
  }

  TagSet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TagSet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TagSet& from);
  void MergeFrom(const TagSet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TagSet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OC.TagSet";
  }
  protected:
  explicit TagSet(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OC_2eproto);
    return ::descriptor_table_OC_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kDescriptionFieldNumber = 3,
    kIdFieldNumber = 1,
    kTypeIdFieldNumber = 4,
    kAccessIdFieldNumber = 5,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string description = 3;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // int64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 typeId = 4;
  void clear_typeid_();
  ::PROTOBUF_NAMESPACE_ID::int64 typeid_() const;
  void set_typeid_(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_typeid_() const;
  void _internal_set_typeid_(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 accessId = 5;
  void clear_accessid();
  ::PROTOBUF_NAMESPACE_ID::int64 accessid() const;
  void set_accessid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_accessid() const;
  void _internal_set_accessid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:OC.TagSet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  ::PROTOBUF_NAMESPACE_ID::int64 typeid__;
  ::PROTOBUF_NAMESPACE_ID::int64 accessid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OC_2eproto;
};
// -------------------------------------------------------------------

class GetTagSetsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OC.GetTagSetsRequest) */ {
 public:
  inline GetTagSetsRequest() : GetTagSetsRequest(nullptr) {}
  virtual ~GetTagSetsRequest();

  GetTagSetsRequest(const GetTagSetsRequest& from);
  GetTagSetsRequest(GetTagSetsRequest&& from) noexcept
    : GetTagSetsRequest() {
    *this = ::std::move(from);
  }

  inline GetTagSetsRequest& operator=(const GetTagSetsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTagSetsRequest& operator=(GetTagSetsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetTagSetsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetTagSetsRequest* internal_default_instance() {
    return reinterpret_cast<const GetTagSetsRequest*>(
               &_GetTagSetsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GetTagSetsRequest& a, GetTagSetsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTagSetsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTagSetsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetTagSetsRequest* New() const final {
    return CreateMaybeMessage<GetTagSetsRequest>(nullptr);
  }

  GetTagSetsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetTagSetsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetTagSetsRequest& from);
  void MergeFrom(const GetTagSetsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTagSetsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OC.GetTagSetsRequest";
  }
  protected:
  explicit GetTagSetsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OC_2eproto);
    return ::descriptor_table_OC_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:OC.GetTagSetsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OC_2eproto;
};
// -------------------------------------------------------------------

class GetTagSetsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OC.GetTagSetsResponse) */ {
 public:
  inline GetTagSetsResponse() : GetTagSetsResponse(nullptr) {}
  virtual ~GetTagSetsResponse();

  GetTagSetsResponse(const GetTagSetsResponse& from);
  GetTagSetsResponse(GetTagSetsResponse&& from) noexcept
    : GetTagSetsResponse() {
    *this = ::std::move(from);
  }

  inline GetTagSetsResponse& operator=(const GetTagSetsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTagSetsResponse& operator=(GetTagSetsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetTagSetsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetTagSetsResponse* internal_default_instance() {
    return reinterpret_cast<const GetTagSetsResponse*>(
               &_GetTagSetsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(GetTagSetsResponse& a, GetTagSetsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTagSetsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTagSetsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetTagSetsResponse* New() const final {
    return CreateMaybeMessage<GetTagSetsResponse>(nullptr);
  }

  GetTagSetsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetTagSetsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetTagSetsResponse& from);
  void MergeFrom(const GetTagSetsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTagSetsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OC.GetTagSetsResponse";
  }
  protected:
  explicit GetTagSetsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OC_2eproto);
    return ::descriptor_table_OC_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagsetsFieldNumber = 1,
  };
  // repeated .OC.TagSet tagsets = 1;
  int tagsets_size() const;
  private:
  int _internal_tagsets_size() const;
  public:
  void clear_tagsets();
  ::OC::TagSet* mutable_tagsets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OC::TagSet >*
      mutable_tagsets();
  private:
  const ::OC::TagSet& _internal_tagsets(int index) const;
  ::OC::TagSet* _internal_add_tagsets();
  public:
  const ::OC::TagSet& tagsets(int index) const;
  ::OC::TagSet* add_tagsets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OC::TagSet >&
      tagsets() const;

  // @@protoc_insertion_point(class_scope:OC.GetTagSetsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OC::TagSet > tagsets_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OC_2eproto;
};
// -------------------------------------------------------------------

class GetTagSetRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OC.GetTagSetRequest) */ {
 public:
  inline GetTagSetRequest() : GetTagSetRequest(nullptr) {}
  virtual ~GetTagSetRequest();

  GetTagSetRequest(const GetTagSetRequest& from);
  GetTagSetRequest(GetTagSetRequest&& from) noexcept
    : GetTagSetRequest() {
    *this = ::std::move(from);
  }

  inline GetTagSetRequest& operator=(const GetTagSetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTagSetRequest& operator=(GetTagSetRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetTagSetRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetTagSetRequest* internal_default_instance() {
    return reinterpret_cast<const GetTagSetRequest*>(
               &_GetTagSetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(GetTagSetRequest& a, GetTagSetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTagSetRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTagSetRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetTagSetRequest* New() const final {
    return CreateMaybeMessage<GetTagSetRequest>(nullptr);
  }

  GetTagSetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetTagSetRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetTagSetRequest& from);
  void MergeFrom(const GetTagSetRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTagSetRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OC.GetTagSetRequest";
  }
  protected:
  explicit GetTagSetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OC_2eproto);
    return ::descriptor_table_OC_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // int64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:OC.GetTagSetRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OC_2eproto;
};
// -------------------------------------------------------------------

class GetTagSetResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OC.GetTagSetResponse) */ {
 public:
  inline GetTagSetResponse() : GetTagSetResponse(nullptr) {}
  virtual ~GetTagSetResponse();

  GetTagSetResponse(const GetTagSetResponse& from);
  GetTagSetResponse(GetTagSetResponse&& from) noexcept
    : GetTagSetResponse() {
    *this = ::std::move(from);
  }

  inline GetTagSetResponse& operator=(const GetTagSetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTagSetResponse& operator=(GetTagSetResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetTagSetResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetTagSetResponse* internal_default_instance() {
    return reinterpret_cast<const GetTagSetResponse*>(
               &_GetTagSetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(GetTagSetResponse& a, GetTagSetResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTagSetResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTagSetResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetTagSetResponse* New() const final {
    return CreateMaybeMessage<GetTagSetResponse>(nullptr);
  }

  GetTagSetResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetTagSetResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetTagSetResponse& from);
  void MergeFrom(const GetTagSetResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTagSetResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OC.GetTagSetResponse";
  }
  protected:
  explicit GetTagSetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OC_2eproto);
    return ::descriptor_table_OC_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagsetFieldNumber = 1,
  };
  // .OC.TagSet tagset = 1;
  bool has_tagset() const;
  private:
  bool _internal_has_tagset() const;
  public:
  void clear_tagset();
  const ::OC::TagSet& tagset() const;
  ::OC::TagSet* release_tagset();
  ::OC::TagSet* mutable_tagset();
  void set_allocated_tagset(::OC::TagSet* tagset);
  private:
  const ::OC::TagSet& _internal_tagset() const;
  ::OC::TagSet* _internal_mutable_tagset();
  public:
  void unsafe_arena_set_allocated_tagset(
      ::OC::TagSet* tagset);
  ::OC::TagSet* unsafe_arena_release_tagset();

  // @@protoc_insertion_point(class_scope:OC.GetTagSetResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::OC::TagSet* tagset_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OC_2eproto;
};
// -------------------------------------------------------------------

class PutTagSetRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OC.PutTagSetRequest) */ {
 public:
  inline PutTagSetRequest() : PutTagSetRequest(nullptr) {}
  virtual ~PutTagSetRequest();

  PutTagSetRequest(const PutTagSetRequest& from);
  PutTagSetRequest(PutTagSetRequest&& from) noexcept
    : PutTagSetRequest() {
    *this = ::std::move(from);
  }

  inline PutTagSetRequest& operator=(const PutTagSetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PutTagSetRequest& operator=(PutTagSetRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PutTagSetRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PutTagSetRequest* internal_default_instance() {
    return reinterpret_cast<const PutTagSetRequest*>(
               &_PutTagSetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(PutTagSetRequest& a, PutTagSetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PutTagSetRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PutTagSetRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PutTagSetRequest* New() const final {
    return CreateMaybeMessage<PutTagSetRequest>(nullptr);
  }

  PutTagSetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PutTagSetRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PutTagSetRequest& from);
  void MergeFrom(const PutTagSetRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PutTagSetRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OC.PutTagSetRequest";
  }
  protected:
  explicit PutTagSetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OC_2eproto);
    return ::descriptor_table_OC_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kDescriptionFieldNumber = 2,
    kTypeIdFieldNumber = 3,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string description = 2;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string typeId = 3;
  void clear_typeid_();
  const std::string& typeid_() const;
  void set_typeid_(const std::string& value);
  void set_typeid_(std::string&& value);
  void set_typeid_(const char* value);
  void set_typeid_(const char* value, size_t size);
  std::string* mutable_typeid_();
  std::string* release_typeid_();
  void set_allocated_typeid_(std::string* typeid_);
  private:
  const std::string& _internal_typeid_() const;
  void _internal_set_typeid_(const std::string& value);
  std::string* _internal_mutable_typeid_();
  public:

  // @@protoc_insertion_point(class_scope:OC.PutTagSetRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr typeid__;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OC_2eproto;
};
// -------------------------------------------------------------------

class PutTagSetResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OC.PutTagSetResponse) */ {
 public:
  inline PutTagSetResponse() : PutTagSetResponse(nullptr) {}
  virtual ~PutTagSetResponse();

  PutTagSetResponse(const PutTagSetResponse& from);
  PutTagSetResponse(PutTagSetResponse&& from) noexcept
    : PutTagSetResponse() {
    *this = ::std::move(from);
  }

  inline PutTagSetResponse& operator=(const PutTagSetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PutTagSetResponse& operator=(PutTagSetResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PutTagSetResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PutTagSetResponse* internal_default_instance() {
    return reinterpret_cast<const PutTagSetResponse*>(
               &_PutTagSetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(PutTagSetResponse& a, PutTagSetResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PutTagSetResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PutTagSetResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PutTagSetResponse* New() const final {
    return CreateMaybeMessage<PutTagSetResponse>(nullptr);
  }

  PutTagSetResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PutTagSetResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PutTagSetResponse& from);
  void MergeFrom(const PutTagSetResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PutTagSetResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OC.PutTagSetResponse";
  }
  protected:
  explicit PutTagSetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OC_2eproto);
    return ::descriptor_table_OC_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagsetFieldNumber = 1,
  };
  // .OC.TagSet tagset = 1;
  bool has_tagset() const;
  private:
  bool _internal_has_tagset() const;
  public:
  void clear_tagset();
  const ::OC::TagSet& tagset() const;
  ::OC::TagSet* release_tagset();
  ::OC::TagSet* mutable_tagset();
  void set_allocated_tagset(::OC::TagSet* tagset);
  private:
  const ::OC::TagSet& _internal_tagset() const;
  ::OC::TagSet* _internal_mutable_tagset();
  public:
  void unsafe_arena_set_allocated_tagset(
      ::OC::TagSet* tagset);
  ::OC::TagSet* unsafe_arena_release_tagset();

  // @@protoc_insertion_point(class_scope:OC.PutTagSetResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::OC::TagSet* tagset_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OC_2eproto;
};
// -------------------------------------------------------------------

class Tag PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OC.Tag) */ {
 public:
  inline Tag() : Tag(nullptr) {}
  virtual ~Tag();

  Tag(const Tag& from);
  Tag(Tag&& from) noexcept
    : Tag() {
    *this = ::std::move(from);
  }

  inline Tag& operator=(const Tag& from) {
    CopyFrom(from);
    return *this;
  }
  inline Tag& operator=(Tag&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Tag& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Tag* internal_default_instance() {
    return reinterpret_cast<const Tag*>(
               &_Tag_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(Tag& a, Tag& b) {
    a.Swap(&b);
  }
  inline void Swap(Tag* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Tag* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Tag* New() const final {
    return CreateMaybeMessage<Tag>(nullptr);
  }

  Tag* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Tag>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Tag& from);
  void MergeFrom(const Tag& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Tag* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OC.Tag";
  }
  protected:
  explicit Tag(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OC_2eproto);
    return ::descriptor_table_OC_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 4,
    kIdFieldNumber = 1,
    kTagSetIdFieldNumber = 2,
    kTypeIdFieldNumber = 3,
  };
  // string name = 4;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 tagSetId = 2;
  void clear_tagsetid();
  ::PROTOBUF_NAMESPACE_ID::int64 tagsetid() const;
  void set_tagsetid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_tagsetid() const;
  void _internal_set_tagsetid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 typeId = 3;
  void clear_typeid_();
  ::PROTOBUF_NAMESPACE_ID::int64 typeid_() const;
  void set_typeid_(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_typeid_() const;
  void _internal_set_typeid_(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:OC.Tag)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  ::PROTOBUF_NAMESPACE_ID::int64 tagsetid_;
  ::PROTOBUF_NAMESPACE_ID::int64 typeid__;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OC_2eproto;
};
// -------------------------------------------------------------------

class GetTagsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OC.GetTagsRequest) */ {
 public:
  inline GetTagsRequest() : GetTagsRequest(nullptr) {}
  virtual ~GetTagsRequest();

  GetTagsRequest(const GetTagsRequest& from);
  GetTagsRequest(GetTagsRequest&& from) noexcept
    : GetTagsRequest() {
    *this = ::std::move(from);
  }

  inline GetTagsRequest& operator=(const GetTagsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTagsRequest& operator=(GetTagsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetTagsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetTagsRequest* internal_default_instance() {
    return reinterpret_cast<const GetTagsRequest*>(
               &_GetTagsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(GetTagsRequest& a, GetTagsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTagsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTagsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetTagsRequest* New() const final {
    return CreateMaybeMessage<GetTagsRequest>(nullptr);
  }

  GetTagsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetTagsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetTagsRequest& from);
  void MergeFrom(const GetTagsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTagsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OC.GetTagsRequest";
  }
  protected:
  explicit GetTagsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OC_2eproto);
    return ::descriptor_table_OC_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:OC.GetTagsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OC_2eproto;
};
// -------------------------------------------------------------------

class GetTagsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OC.GetTagsResponse) */ {
 public:
  inline GetTagsResponse() : GetTagsResponse(nullptr) {}
  virtual ~GetTagsResponse();

  GetTagsResponse(const GetTagsResponse& from);
  GetTagsResponse(GetTagsResponse&& from) noexcept
    : GetTagsResponse() {
    *this = ::std::move(from);
  }

  inline GetTagsResponse& operator=(const GetTagsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTagsResponse& operator=(GetTagsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetTagsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetTagsResponse* internal_default_instance() {
    return reinterpret_cast<const GetTagsResponse*>(
               &_GetTagsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(GetTagsResponse& a, GetTagsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTagsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTagsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetTagsResponse* New() const final {
    return CreateMaybeMessage<GetTagsResponse>(nullptr);
  }

  GetTagsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetTagsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetTagsResponse& from);
  void MergeFrom(const GetTagsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTagsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OC.GetTagsResponse";
  }
  protected:
  explicit GetTagsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OC_2eproto);
    return ::descriptor_table_OC_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagsFieldNumber = 1,
  };
  // repeated .OC.Tag tags = 1;
  int tags_size() const;
  private:
  int _internal_tags_size() const;
  public:
  void clear_tags();
  ::OC::Tag* mutable_tags(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OC::Tag >*
      mutable_tags();
  private:
  const ::OC::Tag& _internal_tags(int index) const;
  ::OC::Tag* _internal_add_tags();
  public:
  const ::OC::Tag& tags(int index) const;
  ::OC::Tag* add_tags();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OC::Tag >&
      tags() const;

  // @@protoc_insertion_point(class_scope:OC.GetTagsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OC::Tag > tags_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OC_2eproto;
};
// -------------------------------------------------------------------

class GetTagRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OC.GetTagRequest) */ {
 public:
  inline GetTagRequest() : GetTagRequest(nullptr) {}
  virtual ~GetTagRequest();

  GetTagRequest(const GetTagRequest& from);
  GetTagRequest(GetTagRequest&& from) noexcept
    : GetTagRequest() {
    *this = ::std::move(from);
  }

  inline GetTagRequest& operator=(const GetTagRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTagRequest& operator=(GetTagRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetTagRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetTagRequest* internal_default_instance() {
    return reinterpret_cast<const GetTagRequest*>(
               &_GetTagRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(GetTagRequest& a, GetTagRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTagRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTagRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetTagRequest* New() const final {
    return CreateMaybeMessage<GetTagRequest>(nullptr);
  }

  GetTagRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetTagRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetTagRequest& from);
  void MergeFrom(const GetTagRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTagRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OC.GetTagRequest";
  }
  protected:
  explicit GetTagRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OC_2eproto);
    return ::descriptor_table_OC_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // int64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:OC.GetTagRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OC_2eproto;
};
// -------------------------------------------------------------------

class GetTagResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OC.GetTagResponse) */ {
 public:
  inline GetTagResponse() : GetTagResponse(nullptr) {}
  virtual ~GetTagResponse();

  GetTagResponse(const GetTagResponse& from);
  GetTagResponse(GetTagResponse&& from) noexcept
    : GetTagResponse() {
    *this = ::std::move(from);
  }

  inline GetTagResponse& operator=(const GetTagResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTagResponse& operator=(GetTagResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetTagResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetTagResponse* internal_default_instance() {
    return reinterpret_cast<const GetTagResponse*>(
               &_GetTagResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(GetTagResponse& a, GetTagResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTagResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTagResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetTagResponse* New() const final {
    return CreateMaybeMessage<GetTagResponse>(nullptr);
  }

  GetTagResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetTagResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetTagResponse& from);
  void MergeFrom(const GetTagResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTagResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OC.GetTagResponse";
  }
  protected:
  explicit GetTagResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OC_2eproto);
    return ::descriptor_table_OC_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagFieldNumber = 1,
  };
  // .OC.Tag tag = 1;
  bool has_tag() const;
  private:
  bool _internal_has_tag() const;
  public:
  void clear_tag();
  const ::OC::Tag& tag() const;
  ::OC::Tag* release_tag();
  ::OC::Tag* mutable_tag();
  void set_allocated_tag(::OC::Tag* tag);
  private:
  const ::OC::Tag& _internal_tag() const;
  ::OC::Tag* _internal_mutable_tag();
  public:
  void unsafe_arena_set_allocated_tag(
      ::OC::Tag* tag);
  ::OC::Tag* unsafe_arena_release_tag();

  // @@protoc_insertion_point(class_scope:OC.GetTagResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::OC::Tag* tag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OC_2eproto;
};
// -------------------------------------------------------------------

class PutTagRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OC.PutTagRequest) */ {
 public:
  inline PutTagRequest() : PutTagRequest(nullptr) {}
  virtual ~PutTagRequest();

  PutTagRequest(const PutTagRequest& from);
  PutTagRequest(PutTagRequest&& from) noexcept
    : PutTagRequest() {
    *this = ::std::move(from);
  }

  inline PutTagRequest& operator=(const PutTagRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PutTagRequest& operator=(PutTagRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PutTagRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PutTagRequest* internal_default_instance() {
    return reinterpret_cast<const PutTagRequest*>(
               &_PutTagRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(PutTagRequest& a, PutTagRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PutTagRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PutTagRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PutTagRequest* New() const final {
    return CreateMaybeMessage<PutTagRequest>(nullptr);
  }

  PutTagRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PutTagRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PutTagRequest& from);
  void MergeFrom(const PutTagRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PutTagRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OC.PutTagRequest";
  }
  protected:
  explicit PutTagRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OC_2eproto);
    return ::descriptor_table_OC_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kTagSetIdFieldNumber = 1,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int64 tagSetId = 1;
  void clear_tagsetid();
  ::PROTOBUF_NAMESPACE_ID::int64 tagsetid() const;
  void set_tagsetid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_tagsetid() const;
  void _internal_set_tagsetid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:OC.PutTagRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int64 tagsetid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OC_2eproto;
};
// -------------------------------------------------------------------

class PutTagResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OC.PutTagResponse) */ {
 public:
  inline PutTagResponse() : PutTagResponse(nullptr) {}
  virtual ~PutTagResponse();

  PutTagResponse(const PutTagResponse& from);
  PutTagResponse(PutTagResponse&& from) noexcept
    : PutTagResponse() {
    *this = ::std::move(from);
  }

  inline PutTagResponse& operator=(const PutTagResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PutTagResponse& operator=(PutTagResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PutTagResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PutTagResponse* internal_default_instance() {
    return reinterpret_cast<const PutTagResponse*>(
               &_PutTagResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(PutTagResponse& a, PutTagResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PutTagResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PutTagResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PutTagResponse* New() const final {
    return CreateMaybeMessage<PutTagResponse>(nullptr);
  }

  PutTagResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PutTagResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PutTagResponse& from);
  void MergeFrom(const PutTagResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PutTagResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OC.PutTagResponse";
  }
  protected:
  explicit PutTagResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OC_2eproto);
    return ::descriptor_table_OC_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagFieldNumber = 1,
  };
  // .OC.Tag tag = 1;
  bool has_tag() const;
  private:
  bool _internal_has_tag() const;
  public:
  void clear_tag();
  const ::OC::Tag& tag() const;
  ::OC::Tag* release_tag();
  ::OC::Tag* mutable_tag();
  void set_allocated_tag(::OC::Tag* tag);
  private:
  const ::OC::Tag& _internal_tag() const;
  ::OC::Tag* _internal_mutable_tag();
  public:
  void unsafe_arena_set_allocated_tag(
      ::OC::Tag* tag);
  ::OC::Tag* unsafe_arena_release_tag();

  // @@protoc_insertion_point(class_scope:OC.PutTagResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::OC::Tag* tag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OC_2eproto;
};
// -------------------------------------------------------------------

class Empty PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OC.Empty) */ {
 public:
  inline Empty() : Empty(nullptr) {}
  virtual ~Empty();

  Empty(const Empty& from);
  Empty(Empty&& from) noexcept
    : Empty() {
    *this = ::std::move(from);
  }

  inline Empty& operator=(const Empty& from) {
    CopyFrom(from);
    return *this;
  }
  inline Empty& operator=(Empty&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Empty& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Empty* internal_default_instance() {
    return reinterpret_cast<const Empty*>(
               &_Empty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(Empty& a, Empty& b) {
    a.Swap(&b);
  }
  inline void Swap(Empty* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Empty* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Empty* New() const final {
    return CreateMaybeMessage<Empty>(nullptr);
  }

  Empty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Empty>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Empty& from);
  void MergeFrom(const Empty& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Empty* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OC.Empty";
  }
  protected:
  explicit Empty(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OC_2eproto);
    return ::descriptor_table_OC_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:OC.Empty)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OC_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Object

// int64 id = 1;
inline void Object::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Object::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Object::id() const {
  // @@protoc_insertion_point(field_get:OC.Object.id)
  return _internal_id();
}
inline void Object::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void Object::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:OC.Object.id)
}

// string name = 2;
inline void Object::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Object::name() const {
  // @@protoc_insertion_point(field_get:OC.Object.name)
  return _internal_name();
}
inline void Object::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:OC.Object.name)
}
inline std::string* Object::mutable_name() {
  // @@protoc_insertion_point(field_mutable:OC.Object.name)
  return _internal_mutable_name();
}
inline const std::string& Object::_internal_name() const {
  return name_.Get();
}
inline void Object::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Object::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:OC.Object.name)
}
inline void Object::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:OC.Object.name)
}
inline void Object::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:OC.Object.name)
}
inline std::string* Object::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Object::release_name() {
  // @@protoc_insertion_point(field_release:OC.Object.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Object::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:OC.Object.name)
}

// string thumbnail = 3;
inline void Object::clear_thumbnail() {
  thumbnail_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Object::thumbnail() const {
  // @@protoc_insertion_point(field_get:OC.Object.thumbnail)
  return _internal_thumbnail();
}
inline void Object::set_thumbnail(const std::string& value) {
  _internal_set_thumbnail(value);
  // @@protoc_insertion_point(field_set:OC.Object.thumbnail)
}
inline std::string* Object::mutable_thumbnail() {
  // @@protoc_insertion_point(field_mutable:OC.Object.thumbnail)
  return _internal_mutable_thumbnail();
}
inline const std::string& Object::_internal_thumbnail() const {
  return thumbnail_.Get();
}
inline void Object::_internal_set_thumbnail(const std::string& value) {
  
  thumbnail_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Object::set_thumbnail(std::string&& value) {
  
  thumbnail_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:OC.Object.thumbnail)
}
inline void Object::set_thumbnail(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  thumbnail_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:OC.Object.thumbnail)
}
inline void Object::set_thumbnail(const char* value,
    size_t size) {
  
  thumbnail_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:OC.Object.thumbnail)
}
inline std::string* Object::_internal_mutable_thumbnail() {
  
  return thumbnail_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Object::release_thumbnail() {
  // @@protoc_insertion_point(field_release:OC.Object.thumbnail)
  return thumbnail_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Object::set_allocated_thumbnail(std::string* thumbnail) {
  if (thumbnail != nullptr) {
    
  } else {
    
  }
  thumbnail_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), thumbnail,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:OC.Object.thumbnail)
}

// string fileType = 4;
inline void Object::clear_filetype() {
  filetype_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Object::filetype() const {
  // @@protoc_insertion_point(field_get:OC.Object.fileType)
  return _internal_filetype();
}
inline void Object::set_filetype(const std::string& value) {
  _internal_set_filetype(value);
  // @@protoc_insertion_point(field_set:OC.Object.fileType)
}
inline std::string* Object::mutable_filetype() {
  // @@protoc_insertion_point(field_mutable:OC.Object.fileType)
  return _internal_mutable_filetype();
}
inline const std::string& Object::_internal_filetype() const {
  return filetype_.Get();
}
inline void Object::_internal_set_filetype(const std::string& value) {
  
  filetype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Object::set_filetype(std::string&& value) {
  
  filetype_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:OC.Object.fileType)
}
inline void Object::set_filetype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filetype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:OC.Object.fileType)
}
inline void Object::set_filetype(const char* value,
    size_t size) {
  
  filetype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:OC.Object.fileType)
}
inline std::string* Object::_internal_mutable_filetype() {
  
  return filetype_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Object::release_filetype() {
  // @@protoc_insertion_point(field_release:OC.Object.fileType)
  return filetype_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Object::set_allocated_filetype(std::string* filetype) {
  if (filetype != nullptr) {
    
  } else {
    
  }
  filetype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filetype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:OC.Object.fileType)
}

// -------------------------------------------------------------------

// GetObjectsRequest

// -------------------------------------------------------------------

// GetObjectsResponse

// repeated .OC.Object objects = 1;
inline int GetObjectsResponse::_internal_objects_size() const {
  return objects_.size();
}
inline int GetObjectsResponse::objects_size() const {
  return _internal_objects_size();
}
inline void GetObjectsResponse::clear_objects() {
  objects_.Clear();
}
inline ::OC::Object* GetObjectsResponse::mutable_objects(int index) {
  // @@protoc_insertion_point(field_mutable:OC.GetObjectsResponse.objects)
  return objects_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OC::Object >*
GetObjectsResponse::mutable_objects() {
  // @@protoc_insertion_point(field_mutable_list:OC.GetObjectsResponse.objects)
  return &objects_;
}
inline const ::OC::Object& GetObjectsResponse::_internal_objects(int index) const {
  return objects_.Get(index);
}
inline const ::OC::Object& GetObjectsResponse::objects(int index) const {
  // @@protoc_insertion_point(field_get:OC.GetObjectsResponse.objects)
  return _internal_objects(index);
}
inline ::OC::Object* GetObjectsResponse::_internal_add_objects() {
  return objects_.Add();
}
inline ::OC::Object* GetObjectsResponse::add_objects() {
  // @@protoc_insertion_point(field_add:OC.GetObjectsResponse.objects)
  return _internal_add_objects();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OC::Object >&
GetObjectsResponse::objects() const {
  // @@protoc_insertion_point(field_list:OC.GetObjectsResponse.objects)
  return objects_;
}

// -------------------------------------------------------------------

// GetObjectRequest

// int64 id = 1;
inline void GetObjectRequest::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetObjectRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetObjectRequest::id() const {
  // @@protoc_insertion_point(field_get:OC.GetObjectRequest.id)
  return _internal_id();
}
inline void GetObjectRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void GetObjectRequest::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:OC.GetObjectRequest.id)
}

// -------------------------------------------------------------------

// GetObjectResponse

// .OC.Object object = 1;
inline bool GetObjectResponse::_internal_has_object() const {
  return this != internal_default_instance() && object_ != nullptr;
}
inline bool GetObjectResponse::has_object() const {
  return _internal_has_object();
}
inline void GetObjectResponse::clear_object() {
  if (GetArena() == nullptr && object_ != nullptr) {
    delete object_;
  }
  object_ = nullptr;
}
inline const ::OC::Object& GetObjectResponse::_internal_object() const {
  const ::OC::Object* p = object_;
  return p != nullptr ? *p : *reinterpret_cast<const ::OC::Object*>(
      &::OC::_Object_default_instance_);
}
inline const ::OC::Object& GetObjectResponse::object() const {
  // @@protoc_insertion_point(field_get:OC.GetObjectResponse.object)
  return _internal_object();
}
inline void GetObjectResponse::unsafe_arena_set_allocated_object(
    ::OC::Object* object) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(object_);
  }
  object_ = object;
  if (object) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OC.GetObjectResponse.object)
}
inline ::OC::Object* GetObjectResponse::release_object() {
  
  ::OC::Object* temp = object_;
  object_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::OC::Object* GetObjectResponse::unsafe_arena_release_object() {
  // @@protoc_insertion_point(field_release:OC.GetObjectResponse.object)
  
  ::OC::Object* temp = object_;
  object_ = nullptr;
  return temp;
}
inline ::OC::Object* GetObjectResponse::_internal_mutable_object() {
  
  if (object_ == nullptr) {
    auto* p = CreateMaybeMessage<::OC::Object>(GetArena());
    object_ = p;
  }
  return object_;
}
inline ::OC::Object* GetObjectResponse::mutable_object() {
  // @@protoc_insertion_point(field_mutable:OC.GetObjectResponse.object)
  return _internal_mutable_object();
}
inline void GetObjectResponse::set_allocated_object(::OC::Object* object) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete object_;
  }
  if (object) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(object);
    if (message_arena != submessage_arena) {
      object = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, object, submessage_arena);
    }
    
  } else {
    
  }
  object_ = object;
  // @@protoc_insertion_point(field_set_allocated:OC.GetObjectResponse.object)
}

// -------------------------------------------------------------------

// PutObjectRequest

// string name = 1;
inline void PutObjectRequest::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PutObjectRequest::name() const {
  // @@protoc_insertion_point(field_get:OC.PutObjectRequest.name)
  return _internal_name();
}
inline void PutObjectRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:OC.PutObjectRequest.name)
}
inline std::string* PutObjectRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:OC.PutObjectRequest.name)
  return _internal_mutable_name();
}
inline const std::string& PutObjectRequest::_internal_name() const {
  return name_.Get();
}
inline void PutObjectRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PutObjectRequest::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:OC.PutObjectRequest.name)
}
inline void PutObjectRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:OC.PutObjectRequest.name)
}
inline void PutObjectRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:OC.PutObjectRequest.name)
}
inline std::string* PutObjectRequest::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PutObjectRequest::release_name() {
  // @@protoc_insertion_point(field_release:OC.PutObjectRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PutObjectRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:OC.PutObjectRequest.name)
}

// string thumbnail = 2;
inline void PutObjectRequest::clear_thumbnail() {
  thumbnail_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PutObjectRequest::thumbnail() const {
  // @@protoc_insertion_point(field_get:OC.PutObjectRequest.thumbnail)
  return _internal_thumbnail();
}
inline void PutObjectRequest::set_thumbnail(const std::string& value) {
  _internal_set_thumbnail(value);
  // @@protoc_insertion_point(field_set:OC.PutObjectRequest.thumbnail)
}
inline std::string* PutObjectRequest::mutable_thumbnail() {
  // @@protoc_insertion_point(field_mutable:OC.PutObjectRequest.thumbnail)
  return _internal_mutable_thumbnail();
}
inline const std::string& PutObjectRequest::_internal_thumbnail() const {
  return thumbnail_.Get();
}
inline void PutObjectRequest::_internal_set_thumbnail(const std::string& value) {
  
  thumbnail_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PutObjectRequest::set_thumbnail(std::string&& value) {
  
  thumbnail_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:OC.PutObjectRequest.thumbnail)
}
inline void PutObjectRequest::set_thumbnail(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  thumbnail_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:OC.PutObjectRequest.thumbnail)
}
inline void PutObjectRequest::set_thumbnail(const char* value,
    size_t size) {
  
  thumbnail_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:OC.PutObjectRequest.thumbnail)
}
inline std::string* PutObjectRequest::_internal_mutable_thumbnail() {
  
  return thumbnail_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PutObjectRequest::release_thumbnail() {
  // @@protoc_insertion_point(field_release:OC.PutObjectRequest.thumbnail)
  return thumbnail_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PutObjectRequest::set_allocated_thumbnail(std::string* thumbnail) {
  if (thumbnail != nullptr) {
    
  } else {
    
  }
  thumbnail_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), thumbnail,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:OC.PutObjectRequest.thumbnail)
}

// string fileType = 3;
inline void PutObjectRequest::clear_filetype() {
  filetype_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PutObjectRequest::filetype() const {
  // @@protoc_insertion_point(field_get:OC.PutObjectRequest.fileType)
  return _internal_filetype();
}
inline void PutObjectRequest::set_filetype(const std::string& value) {
  _internal_set_filetype(value);
  // @@protoc_insertion_point(field_set:OC.PutObjectRequest.fileType)
}
inline std::string* PutObjectRequest::mutable_filetype() {
  // @@protoc_insertion_point(field_mutable:OC.PutObjectRequest.fileType)
  return _internal_mutable_filetype();
}
inline const std::string& PutObjectRequest::_internal_filetype() const {
  return filetype_.Get();
}
inline void PutObjectRequest::_internal_set_filetype(const std::string& value) {
  
  filetype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PutObjectRequest::set_filetype(std::string&& value) {
  
  filetype_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:OC.PutObjectRequest.fileType)
}
inline void PutObjectRequest::set_filetype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filetype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:OC.PutObjectRequest.fileType)
}
inline void PutObjectRequest::set_filetype(const char* value,
    size_t size) {
  
  filetype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:OC.PutObjectRequest.fileType)
}
inline std::string* PutObjectRequest::_internal_mutable_filetype() {
  
  return filetype_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PutObjectRequest::release_filetype() {
  // @@protoc_insertion_point(field_release:OC.PutObjectRequest.fileType)
  return filetype_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PutObjectRequest::set_allocated_filetype(std::string* filetype) {
  if (filetype != nullptr) {
    
  } else {
    
  }
  filetype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filetype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:OC.PutObjectRequest.fileType)
}

// -------------------------------------------------------------------

// PutObjectResponse

// .OC.Object object = 1;
inline bool PutObjectResponse::_internal_has_object() const {
  return this != internal_default_instance() && object_ != nullptr;
}
inline bool PutObjectResponse::has_object() const {
  return _internal_has_object();
}
inline void PutObjectResponse::clear_object() {
  if (GetArena() == nullptr && object_ != nullptr) {
    delete object_;
  }
  object_ = nullptr;
}
inline const ::OC::Object& PutObjectResponse::_internal_object() const {
  const ::OC::Object* p = object_;
  return p != nullptr ? *p : *reinterpret_cast<const ::OC::Object*>(
      &::OC::_Object_default_instance_);
}
inline const ::OC::Object& PutObjectResponse::object() const {
  // @@protoc_insertion_point(field_get:OC.PutObjectResponse.object)
  return _internal_object();
}
inline void PutObjectResponse::unsafe_arena_set_allocated_object(
    ::OC::Object* object) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(object_);
  }
  object_ = object;
  if (object) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OC.PutObjectResponse.object)
}
inline ::OC::Object* PutObjectResponse::release_object() {
  
  ::OC::Object* temp = object_;
  object_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::OC::Object* PutObjectResponse::unsafe_arena_release_object() {
  // @@protoc_insertion_point(field_release:OC.PutObjectResponse.object)
  
  ::OC::Object* temp = object_;
  object_ = nullptr;
  return temp;
}
inline ::OC::Object* PutObjectResponse::_internal_mutable_object() {
  
  if (object_ == nullptr) {
    auto* p = CreateMaybeMessage<::OC::Object>(GetArena());
    object_ = p;
  }
  return object_;
}
inline ::OC::Object* PutObjectResponse::mutable_object() {
  // @@protoc_insertion_point(field_mutable:OC.PutObjectResponse.object)
  return _internal_mutable_object();
}
inline void PutObjectResponse::set_allocated_object(::OC::Object* object) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete object_;
  }
  if (object) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(object);
    if (message_arena != submessage_arena) {
      object = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, object, submessage_arena);
    }
    
  } else {
    
  }
  object_ = object;
  // @@protoc_insertion_point(field_set_allocated:OC.PutObjectResponse.object)
}

// -------------------------------------------------------------------

// TagSet

// int64 id = 1;
inline void TagSet::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TagSet::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TagSet::id() const {
  // @@protoc_insertion_point(field_get:OC.TagSet.id)
  return _internal_id();
}
inline void TagSet::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void TagSet::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:OC.TagSet.id)
}

// string name = 2;
inline void TagSet::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TagSet::name() const {
  // @@protoc_insertion_point(field_get:OC.TagSet.name)
  return _internal_name();
}
inline void TagSet::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:OC.TagSet.name)
}
inline std::string* TagSet::mutable_name() {
  // @@protoc_insertion_point(field_mutable:OC.TagSet.name)
  return _internal_mutable_name();
}
inline const std::string& TagSet::_internal_name() const {
  return name_.Get();
}
inline void TagSet::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TagSet::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:OC.TagSet.name)
}
inline void TagSet::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:OC.TagSet.name)
}
inline void TagSet::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:OC.TagSet.name)
}
inline std::string* TagSet::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TagSet::release_name() {
  // @@protoc_insertion_point(field_release:OC.TagSet.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TagSet::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:OC.TagSet.name)
}

// string description = 3;
inline void TagSet::clear_description() {
  description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TagSet::description() const {
  // @@protoc_insertion_point(field_get:OC.TagSet.description)
  return _internal_description();
}
inline void TagSet::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:OC.TagSet.description)
}
inline std::string* TagSet::mutable_description() {
  // @@protoc_insertion_point(field_mutable:OC.TagSet.description)
  return _internal_mutable_description();
}
inline const std::string& TagSet::_internal_description() const {
  return description_.Get();
}
inline void TagSet::_internal_set_description(const std::string& value) {
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TagSet::set_description(std::string&& value) {
  
  description_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:OC.TagSet.description)
}
inline void TagSet::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:OC.TagSet.description)
}
inline void TagSet::set_description(const char* value,
    size_t size) {
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:OC.TagSet.description)
}
inline std::string* TagSet::_internal_mutable_description() {
  
  return description_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TagSet::release_description() {
  // @@protoc_insertion_point(field_release:OC.TagSet.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TagSet::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:OC.TagSet.description)
}

// int64 typeId = 4;
inline void TagSet::clear_typeid_() {
  typeid__ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TagSet::_internal_typeid_() const {
  return typeid__;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TagSet::typeid_() const {
  // @@protoc_insertion_point(field_get:OC.TagSet.typeId)
  return _internal_typeid_();
}
inline void TagSet::_internal_set_typeid_(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  typeid__ = value;
}
inline void TagSet::set_typeid_(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_typeid_(value);
  // @@protoc_insertion_point(field_set:OC.TagSet.typeId)
}

// int64 accessId = 5;
inline void TagSet::clear_accessid() {
  accessid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TagSet::_internal_accessid() const {
  return accessid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TagSet::accessid() const {
  // @@protoc_insertion_point(field_get:OC.TagSet.accessId)
  return _internal_accessid();
}
inline void TagSet::_internal_set_accessid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  accessid_ = value;
}
inline void TagSet::set_accessid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_accessid(value);
  // @@protoc_insertion_point(field_set:OC.TagSet.accessId)
}

// -------------------------------------------------------------------

// GetTagSetsRequest

// -------------------------------------------------------------------

// GetTagSetsResponse

// repeated .OC.TagSet tagsets = 1;
inline int GetTagSetsResponse::_internal_tagsets_size() const {
  return tagsets_.size();
}
inline int GetTagSetsResponse::tagsets_size() const {
  return _internal_tagsets_size();
}
inline void GetTagSetsResponse::clear_tagsets() {
  tagsets_.Clear();
}
inline ::OC::TagSet* GetTagSetsResponse::mutable_tagsets(int index) {
  // @@protoc_insertion_point(field_mutable:OC.GetTagSetsResponse.tagsets)
  return tagsets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OC::TagSet >*
GetTagSetsResponse::mutable_tagsets() {
  // @@protoc_insertion_point(field_mutable_list:OC.GetTagSetsResponse.tagsets)
  return &tagsets_;
}
inline const ::OC::TagSet& GetTagSetsResponse::_internal_tagsets(int index) const {
  return tagsets_.Get(index);
}
inline const ::OC::TagSet& GetTagSetsResponse::tagsets(int index) const {
  // @@protoc_insertion_point(field_get:OC.GetTagSetsResponse.tagsets)
  return _internal_tagsets(index);
}
inline ::OC::TagSet* GetTagSetsResponse::_internal_add_tagsets() {
  return tagsets_.Add();
}
inline ::OC::TagSet* GetTagSetsResponse::add_tagsets() {
  // @@protoc_insertion_point(field_add:OC.GetTagSetsResponse.tagsets)
  return _internal_add_tagsets();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OC::TagSet >&
GetTagSetsResponse::tagsets() const {
  // @@protoc_insertion_point(field_list:OC.GetTagSetsResponse.tagsets)
  return tagsets_;
}

// -------------------------------------------------------------------

// GetTagSetRequest

// int64 id = 1;
inline void GetTagSetRequest::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetTagSetRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetTagSetRequest::id() const {
  // @@protoc_insertion_point(field_get:OC.GetTagSetRequest.id)
  return _internal_id();
}
inline void GetTagSetRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void GetTagSetRequest::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:OC.GetTagSetRequest.id)
}

// -------------------------------------------------------------------

// GetTagSetResponse

// .OC.TagSet tagset = 1;
inline bool GetTagSetResponse::_internal_has_tagset() const {
  return this != internal_default_instance() && tagset_ != nullptr;
}
inline bool GetTagSetResponse::has_tagset() const {
  return _internal_has_tagset();
}
inline void GetTagSetResponse::clear_tagset() {
  if (GetArena() == nullptr && tagset_ != nullptr) {
    delete tagset_;
  }
  tagset_ = nullptr;
}
inline const ::OC::TagSet& GetTagSetResponse::_internal_tagset() const {
  const ::OC::TagSet* p = tagset_;
  return p != nullptr ? *p : *reinterpret_cast<const ::OC::TagSet*>(
      &::OC::_TagSet_default_instance_);
}
inline const ::OC::TagSet& GetTagSetResponse::tagset() const {
  // @@protoc_insertion_point(field_get:OC.GetTagSetResponse.tagset)
  return _internal_tagset();
}
inline void GetTagSetResponse::unsafe_arena_set_allocated_tagset(
    ::OC::TagSet* tagset) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tagset_);
  }
  tagset_ = tagset;
  if (tagset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OC.GetTagSetResponse.tagset)
}
inline ::OC::TagSet* GetTagSetResponse::release_tagset() {
  
  ::OC::TagSet* temp = tagset_;
  tagset_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::OC::TagSet* GetTagSetResponse::unsafe_arena_release_tagset() {
  // @@protoc_insertion_point(field_release:OC.GetTagSetResponse.tagset)
  
  ::OC::TagSet* temp = tagset_;
  tagset_ = nullptr;
  return temp;
}
inline ::OC::TagSet* GetTagSetResponse::_internal_mutable_tagset() {
  
  if (tagset_ == nullptr) {
    auto* p = CreateMaybeMessage<::OC::TagSet>(GetArena());
    tagset_ = p;
  }
  return tagset_;
}
inline ::OC::TagSet* GetTagSetResponse::mutable_tagset() {
  // @@protoc_insertion_point(field_mutable:OC.GetTagSetResponse.tagset)
  return _internal_mutable_tagset();
}
inline void GetTagSetResponse::set_allocated_tagset(::OC::TagSet* tagset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete tagset_;
  }
  if (tagset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(tagset);
    if (message_arena != submessage_arena) {
      tagset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tagset, submessage_arena);
    }
    
  } else {
    
  }
  tagset_ = tagset;
  // @@protoc_insertion_point(field_set_allocated:OC.GetTagSetResponse.tagset)
}

// -------------------------------------------------------------------

// PutTagSetRequest

// string name = 1;
inline void PutTagSetRequest::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PutTagSetRequest::name() const {
  // @@protoc_insertion_point(field_get:OC.PutTagSetRequest.name)
  return _internal_name();
}
inline void PutTagSetRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:OC.PutTagSetRequest.name)
}
inline std::string* PutTagSetRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:OC.PutTagSetRequest.name)
  return _internal_mutable_name();
}
inline const std::string& PutTagSetRequest::_internal_name() const {
  return name_.Get();
}
inline void PutTagSetRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PutTagSetRequest::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:OC.PutTagSetRequest.name)
}
inline void PutTagSetRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:OC.PutTagSetRequest.name)
}
inline void PutTagSetRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:OC.PutTagSetRequest.name)
}
inline std::string* PutTagSetRequest::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PutTagSetRequest::release_name() {
  // @@protoc_insertion_point(field_release:OC.PutTagSetRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PutTagSetRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:OC.PutTagSetRequest.name)
}

// string description = 2;
inline void PutTagSetRequest::clear_description() {
  description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PutTagSetRequest::description() const {
  // @@protoc_insertion_point(field_get:OC.PutTagSetRequest.description)
  return _internal_description();
}
inline void PutTagSetRequest::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:OC.PutTagSetRequest.description)
}
inline std::string* PutTagSetRequest::mutable_description() {
  // @@protoc_insertion_point(field_mutable:OC.PutTagSetRequest.description)
  return _internal_mutable_description();
}
inline const std::string& PutTagSetRequest::_internal_description() const {
  return description_.Get();
}
inline void PutTagSetRequest::_internal_set_description(const std::string& value) {
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PutTagSetRequest::set_description(std::string&& value) {
  
  description_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:OC.PutTagSetRequest.description)
}
inline void PutTagSetRequest::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:OC.PutTagSetRequest.description)
}
inline void PutTagSetRequest::set_description(const char* value,
    size_t size) {
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:OC.PutTagSetRequest.description)
}
inline std::string* PutTagSetRequest::_internal_mutable_description() {
  
  return description_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PutTagSetRequest::release_description() {
  // @@protoc_insertion_point(field_release:OC.PutTagSetRequest.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PutTagSetRequest::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:OC.PutTagSetRequest.description)
}

// string typeId = 3;
inline void PutTagSetRequest::clear_typeid_() {
  typeid__.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PutTagSetRequest::typeid_() const {
  // @@protoc_insertion_point(field_get:OC.PutTagSetRequest.typeId)
  return _internal_typeid_();
}
inline void PutTagSetRequest::set_typeid_(const std::string& value) {
  _internal_set_typeid_(value);
  // @@protoc_insertion_point(field_set:OC.PutTagSetRequest.typeId)
}
inline std::string* PutTagSetRequest::mutable_typeid_() {
  // @@protoc_insertion_point(field_mutable:OC.PutTagSetRequest.typeId)
  return _internal_mutable_typeid_();
}
inline const std::string& PutTagSetRequest::_internal_typeid_() const {
  return typeid__.Get();
}
inline void PutTagSetRequest::_internal_set_typeid_(const std::string& value) {
  
  typeid__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PutTagSetRequest::set_typeid_(std::string&& value) {
  
  typeid__.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:OC.PutTagSetRequest.typeId)
}
inline void PutTagSetRequest::set_typeid_(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  typeid__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:OC.PutTagSetRequest.typeId)
}
inline void PutTagSetRequest::set_typeid_(const char* value,
    size_t size) {
  
  typeid__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:OC.PutTagSetRequest.typeId)
}
inline std::string* PutTagSetRequest::_internal_mutable_typeid_() {
  
  return typeid__.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PutTagSetRequest::release_typeid_() {
  // @@protoc_insertion_point(field_release:OC.PutTagSetRequest.typeId)
  return typeid__.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PutTagSetRequest::set_allocated_typeid_(std::string* typeid_) {
  if (typeid_ != nullptr) {
    
  } else {
    
  }
  typeid__.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), typeid_,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:OC.PutTagSetRequest.typeId)
}

// -------------------------------------------------------------------

// PutTagSetResponse

// .OC.TagSet tagset = 1;
inline bool PutTagSetResponse::_internal_has_tagset() const {
  return this != internal_default_instance() && tagset_ != nullptr;
}
inline bool PutTagSetResponse::has_tagset() const {
  return _internal_has_tagset();
}
inline void PutTagSetResponse::clear_tagset() {
  if (GetArena() == nullptr && tagset_ != nullptr) {
    delete tagset_;
  }
  tagset_ = nullptr;
}
inline const ::OC::TagSet& PutTagSetResponse::_internal_tagset() const {
  const ::OC::TagSet* p = tagset_;
  return p != nullptr ? *p : *reinterpret_cast<const ::OC::TagSet*>(
      &::OC::_TagSet_default_instance_);
}
inline const ::OC::TagSet& PutTagSetResponse::tagset() const {
  // @@protoc_insertion_point(field_get:OC.PutTagSetResponse.tagset)
  return _internal_tagset();
}
inline void PutTagSetResponse::unsafe_arena_set_allocated_tagset(
    ::OC::TagSet* tagset) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tagset_);
  }
  tagset_ = tagset;
  if (tagset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OC.PutTagSetResponse.tagset)
}
inline ::OC::TagSet* PutTagSetResponse::release_tagset() {
  
  ::OC::TagSet* temp = tagset_;
  tagset_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::OC::TagSet* PutTagSetResponse::unsafe_arena_release_tagset() {
  // @@protoc_insertion_point(field_release:OC.PutTagSetResponse.tagset)
  
  ::OC::TagSet* temp = tagset_;
  tagset_ = nullptr;
  return temp;
}
inline ::OC::TagSet* PutTagSetResponse::_internal_mutable_tagset() {
  
  if (tagset_ == nullptr) {
    auto* p = CreateMaybeMessage<::OC::TagSet>(GetArena());
    tagset_ = p;
  }
  return tagset_;
}
inline ::OC::TagSet* PutTagSetResponse::mutable_tagset() {
  // @@protoc_insertion_point(field_mutable:OC.PutTagSetResponse.tagset)
  return _internal_mutable_tagset();
}
inline void PutTagSetResponse::set_allocated_tagset(::OC::TagSet* tagset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete tagset_;
  }
  if (tagset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(tagset);
    if (message_arena != submessage_arena) {
      tagset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tagset, submessage_arena);
    }
    
  } else {
    
  }
  tagset_ = tagset;
  // @@protoc_insertion_point(field_set_allocated:OC.PutTagSetResponse.tagset)
}

// -------------------------------------------------------------------

// Tag

// int64 id = 1;
inline void Tag::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Tag::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Tag::id() const {
  // @@protoc_insertion_point(field_get:OC.Tag.id)
  return _internal_id();
}
inline void Tag::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void Tag::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:OC.Tag.id)
}

// int64 tagSetId = 2;
inline void Tag::clear_tagsetid() {
  tagsetid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Tag::_internal_tagsetid() const {
  return tagsetid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Tag::tagsetid() const {
  // @@protoc_insertion_point(field_get:OC.Tag.tagSetId)
  return _internal_tagsetid();
}
inline void Tag::_internal_set_tagsetid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  tagsetid_ = value;
}
inline void Tag::set_tagsetid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_tagsetid(value);
  // @@protoc_insertion_point(field_set:OC.Tag.tagSetId)
}

// int64 typeId = 3;
inline void Tag::clear_typeid_() {
  typeid__ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Tag::_internal_typeid_() const {
  return typeid__;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Tag::typeid_() const {
  // @@protoc_insertion_point(field_get:OC.Tag.typeId)
  return _internal_typeid_();
}
inline void Tag::_internal_set_typeid_(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  typeid__ = value;
}
inline void Tag::set_typeid_(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_typeid_(value);
  // @@protoc_insertion_point(field_set:OC.Tag.typeId)
}

// string name = 4;
inline void Tag::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Tag::name() const {
  // @@protoc_insertion_point(field_get:OC.Tag.name)
  return _internal_name();
}
inline void Tag::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:OC.Tag.name)
}
inline std::string* Tag::mutable_name() {
  // @@protoc_insertion_point(field_mutable:OC.Tag.name)
  return _internal_mutable_name();
}
inline const std::string& Tag::_internal_name() const {
  return name_.Get();
}
inline void Tag::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Tag::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:OC.Tag.name)
}
inline void Tag::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:OC.Tag.name)
}
inline void Tag::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:OC.Tag.name)
}
inline std::string* Tag::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Tag::release_name() {
  // @@protoc_insertion_point(field_release:OC.Tag.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Tag::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:OC.Tag.name)
}

// -------------------------------------------------------------------

// GetTagsRequest

// -------------------------------------------------------------------

// GetTagsResponse

// repeated .OC.Tag tags = 1;
inline int GetTagsResponse::_internal_tags_size() const {
  return tags_.size();
}
inline int GetTagsResponse::tags_size() const {
  return _internal_tags_size();
}
inline void GetTagsResponse::clear_tags() {
  tags_.Clear();
}
inline ::OC::Tag* GetTagsResponse::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:OC.GetTagsResponse.tags)
  return tags_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OC::Tag >*
GetTagsResponse::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:OC.GetTagsResponse.tags)
  return &tags_;
}
inline const ::OC::Tag& GetTagsResponse::_internal_tags(int index) const {
  return tags_.Get(index);
}
inline const ::OC::Tag& GetTagsResponse::tags(int index) const {
  // @@protoc_insertion_point(field_get:OC.GetTagsResponse.tags)
  return _internal_tags(index);
}
inline ::OC::Tag* GetTagsResponse::_internal_add_tags() {
  return tags_.Add();
}
inline ::OC::Tag* GetTagsResponse::add_tags() {
  // @@protoc_insertion_point(field_add:OC.GetTagsResponse.tags)
  return _internal_add_tags();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OC::Tag >&
GetTagsResponse::tags() const {
  // @@protoc_insertion_point(field_list:OC.GetTagsResponse.tags)
  return tags_;
}

// -------------------------------------------------------------------

// GetTagRequest

// int64 id = 1;
inline void GetTagRequest::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetTagRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetTagRequest::id() const {
  // @@protoc_insertion_point(field_get:OC.GetTagRequest.id)
  return _internal_id();
}
inline void GetTagRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void GetTagRequest::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:OC.GetTagRequest.id)
}

// -------------------------------------------------------------------

// GetTagResponse

// .OC.Tag tag = 1;
inline bool GetTagResponse::_internal_has_tag() const {
  return this != internal_default_instance() && tag_ != nullptr;
}
inline bool GetTagResponse::has_tag() const {
  return _internal_has_tag();
}
inline void GetTagResponse::clear_tag() {
  if (GetArena() == nullptr && tag_ != nullptr) {
    delete tag_;
  }
  tag_ = nullptr;
}
inline const ::OC::Tag& GetTagResponse::_internal_tag() const {
  const ::OC::Tag* p = tag_;
  return p != nullptr ? *p : *reinterpret_cast<const ::OC::Tag*>(
      &::OC::_Tag_default_instance_);
}
inline const ::OC::Tag& GetTagResponse::tag() const {
  // @@protoc_insertion_point(field_get:OC.GetTagResponse.tag)
  return _internal_tag();
}
inline void GetTagResponse::unsafe_arena_set_allocated_tag(
    ::OC::Tag* tag) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tag_);
  }
  tag_ = tag;
  if (tag) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OC.GetTagResponse.tag)
}
inline ::OC::Tag* GetTagResponse::release_tag() {
  
  ::OC::Tag* temp = tag_;
  tag_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::OC::Tag* GetTagResponse::unsafe_arena_release_tag() {
  // @@protoc_insertion_point(field_release:OC.GetTagResponse.tag)
  
  ::OC::Tag* temp = tag_;
  tag_ = nullptr;
  return temp;
}
inline ::OC::Tag* GetTagResponse::_internal_mutable_tag() {
  
  if (tag_ == nullptr) {
    auto* p = CreateMaybeMessage<::OC::Tag>(GetArena());
    tag_ = p;
  }
  return tag_;
}
inline ::OC::Tag* GetTagResponse::mutable_tag() {
  // @@protoc_insertion_point(field_mutable:OC.GetTagResponse.tag)
  return _internal_mutable_tag();
}
inline void GetTagResponse::set_allocated_tag(::OC::Tag* tag) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete tag_;
  }
  if (tag) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(tag);
    if (message_arena != submessage_arena) {
      tag = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tag, submessage_arena);
    }
    
  } else {
    
  }
  tag_ = tag;
  // @@protoc_insertion_point(field_set_allocated:OC.GetTagResponse.tag)
}

// -------------------------------------------------------------------

// PutTagRequest

// int64 tagSetId = 1;
inline void PutTagRequest::clear_tagsetid() {
  tagsetid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PutTagRequest::_internal_tagsetid() const {
  return tagsetid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PutTagRequest::tagsetid() const {
  // @@protoc_insertion_point(field_get:OC.PutTagRequest.tagSetId)
  return _internal_tagsetid();
}
inline void PutTagRequest::_internal_set_tagsetid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  tagsetid_ = value;
}
inline void PutTagRequest::set_tagsetid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_tagsetid(value);
  // @@protoc_insertion_point(field_set:OC.PutTagRequest.tagSetId)
}

// string name = 2;
inline void PutTagRequest::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PutTagRequest::name() const {
  // @@protoc_insertion_point(field_get:OC.PutTagRequest.name)
  return _internal_name();
}
inline void PutTagRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:OC.PutTagRequest.name)
}
inline std::string* PutTagRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:OC.PutTagRequest.name)
  return _internal_mutable_name();
}
inline const std::string& PutTagRequest::_internal_name() const {
  return name_.Get();
}
inline void PutTagRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PutTagRequest::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:OC.PutTagRequest.name)
}
inline void PutTagRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:OC.PutTagRequest.name)
}
inline void PutTagRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:OC.PutTagRequest.name)
}
inline std::string* PutTagRequest::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PutTagRequest::release_name() {
  // @@protoc_insertion_point(field_release:OC.PutTagRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PutTagRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:OC.PutTagRequest.name)
}

// -------------------------------------------------------------------

// PutTagResponse

// .OC.Tag tag = 1;
inline bool PutTagResponse::_internal_has_tag() const {
  return this != internal_default_instance() && tag_ != nullptr;
}
inline bool PutTagResponse::has_tag() const {
  return _internal_has_tag();
}
inline void PutTagResponse::clear_tag() {
  if (GetArena() == nullptr && tag_ != nullptr) {
    delete tag_;
  }
  tag_ = nullptr;
}
inline const ::OC::Tag& PutTagResponse::_internal_tag() const {
  const ::OC::Tag* p = tag_;
  return p != nullptr ? *p : *reinterpret_cast<const ::OC::Tag*>(
      &::OC::_Tag_default_instance_);
}
inline const ::OC::Tag& PutTagResponse::tag() const {
  // @@protoc_insertion_point(field_get:OC.PutTagResponse.tag)
  return _internal_tag();
}
inline void PutTagResponse::unsafe_arena_set_allocated_tag(
    ::OC::Tag* tag) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tag_);
  }
  tag_ = tag;
  if (tag) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OC.PutTagResponse.tag)
}
inline ::OC::Tag* PutTagResponse::release_tag() {
  
  ::OC::Tag* temp = tag_;
  tag_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::OC::Tag* PutTagResponse::unsafe_arena_release_tag() {
  // @@protoc_insertion_point(field_release:OC.PutTagResponse.tag)
  
  ::OC::Tag* temp = tag_;
  tag_ = nullptr;
  return temp;
}
inline ::OC::Tag* PutTagResponse::_internal_mutable_tag() {
  
  if (tag_ == nullptr) {
    auto* p = CreateMaybeMessage<::OC::Tag>(GetArena());
    tag_ = p;
  }
  return tag_;
}
inline ::OC::Tag* PutTagResponse::mutable_tag() {
  // @@protoc_insertion_point(field_mutable:OC.PutTagResponse.tag)
  return _internal_mutable_tag();
}
inline void PutTagResponse::set_allocated_tag(::OC::Tag* tag) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete tag_;
  }
  if (tag) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(tag);
    if (message_arena != submessage_arena) {
      tag = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tag, submessage_arena);
    }
    
  } else {
    
  }
  tag_ = tag;
  // @@protoc_insertion_point(field_set_allocated:OC.PutTagResponse.tag)
}

// -------------------------------------------------------------------

// Empty

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace OC

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_OC_2eproto
